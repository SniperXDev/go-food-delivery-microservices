// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	persistmessage "github.com/mehdihadeli/go-food-delivery-microservices/internal/pkg/core/messaging/persistmessage"
	types "github.com/mehdihadeli/go-food-delivery-microservices/internal/pkg/core/messaging/types"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// MessagePersistenceService is an autogenerated mock type for the MessagePersistenceService type
type MessagePersistenceService struct {
	mock.Mock
}

type MessagePersistenceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MessagePersistenceService) EXPECT() *MessagePersistenceService_Expecter {
	return &MessagePersistenceService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, storeMessage
func (_m *MessagePersistenceService) Add(ctx context.Context, storeMessage *persistmessage.StoreMessage) error {
	ret := _m.Called(ctx, storeMessage)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *persistmessage.StoreMessage) error); ok {
		r0 = rf(ctx, storeMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MessagePersistenceService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - storeMessage *persistmessage.StoreMessage
func (_e *MessagePersistenceService_Expecter) Add(ctx interface{}, storeMessage interface{}) *MessagePersistenceService_Add_Call {
	return &MessagePersistenceService_Add_Call{Call: _e.mock.On("Add", ctx, storeMessage)}
}

func (_c *MessagePersistenceService_Add_Call) Run(run func(ctx context.Context, storeMessage *persistmessage.StoreMessage)) *MessagePersistenceService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*persistmessage.StoreMessage))
	})
	return _c
}

func (_c *MessagePersistenceService_Add_Call) Return(_a0 error) *MessagePersistenceService_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_Add_Call) RunAndReturn(run func(context.Context, *persistmessage.StoreMessage) error) *MessagePersistenceService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddPublishMessage provides a mock function with given fields: messageEnvelope, ctx
func (_m *MessagePersistenceService) AddPublishMessage(messageEnvelope types.MessageEnvelope, ctx context.Context) error {
	ret := _m.Called(messageEnvelope, ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddPublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.MessageEnvelope, context.Context) error); ok {
		r0 = rf(messageEnvelope, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_AddPublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPublishMessage'
type MessagePersistenceService_AddPublishMessage_Call struct {
	*mock.Call
}

// AddPublishMessage is a helper method to define mock.On call
//   - messageEnvelope types.MessageEnvelope
//   - ctx context.Context
func (_e *MessagePersistenceService_Expecter) AddPublishMessage(messageEnvelope interface{}, ctx interface{}) *MessagePersistenceService_AddPublishMessage_Call {
	return &MessagePersistenceService_AddPublishMessage_Call{Call: _e.mock.On("AddPublishMessage", messageEnvelope, ctx)}
}

func (_c *MessagePersistenceService_AddPublishMessage_Call) Run(run func(messageEnvelope types.MessageEnvelope, ctx context.Context)) *MessagePersistenceService_AddPublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.MessageEnvelope), args[1].(context.Context))
	})
	return _c
}

func (_c *MessagePersistenceService_AddPublishMessage_Call) Return(_a0 error) *MessagePersistenceService_AddPublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_AddPublishMessage_Call) RunAndReturn(run func(types.MessageEnvelope, context.Context) error) *MessagePersistenceService_AddPublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// AddReceivedMessage provides a mock function with given fields: messageEnvelope, ctx
func (_m *MessagePersistenceService) AddReceivedMessage(messageEnvelope types.MessageEnvelope, ctx context.Context) error {
	ret := _m.Called(messageEnvelope, ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddReceivedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.MessageEnvelope, context.Context) error); ok {
		r0 = rf(messageEnvelope, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_AddReceivedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReceivedMessage'
type MessagePersistenceService_AddReceivedMessage_Call struct {
	*mock.Call
}

// AddReceivedMessage is a helper method to define mock.On call
//   - messageEnvelope types.MessageEnvelope
//   - ctx context.Context
func (_e *MessagePersistenceService_Expecter) AddReceivedMessage(messageEnvelope interface{}, ctx interface{}) *MessagePersistenceService_AddReceivedMessage_Call {
	return &MessagePersistenceService_AddReceivedMessage_Call{Call: _e.mock.On("AddReceivedMessage", messageEnvelope, ctx)}
}

func (_c *MessagePersistenceService_AddReceivedMessage_Call) Run(run func(messageEnvelope types.MessageEnvelope, ctx context.Context)) *MessagePersistenceService_AddReceivedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.MessageEnvelope), args[1].(context.Context))
	})
	return _c
}

func (_c *MessagePersistenceService_AddReceivedMessage_Call) Return(_a0 error) *MessagePersistenceService_AddReceivedMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_AddReceivedMessage_Call) RunAndReturn(run func(types.MessageEnvelope, context.Context) error) *MessagePersistenceService_AddReceivedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeState provides a mock function with given fields: ctx, messageID, status
func (_m *MessagePersistenceService) ChangeState(ctx context.Context, messageID uuid.UUID, status persistmessage.MessageStatus) error {
	ret := _m.Called(ctx, messageID, status)

	if len(ret) == 0 {
		panic("no return value specified for ChangeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, persistmessage.MessageStatus) error); ok {
		r0 = rf(ctx, messageID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_ChangeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeState'
type MessagePersistenceService_ChangeState_Call struct {
	*mock.Call
}

// ChangeState is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID uuid.UUID
//   - status persistmessage.MessageStatus
func (_e *MessagePersistenceService_Expecter) ChangeState(ctx interface{}, messageID interface{}, status interface{}) *MessagePersistenceService_ChangeState_Call {
	return &MessagePersistenceService_ChangeState_Call{Call: _e.mock.On("ChangeState", ctx, messageID, status)}
}

func (_c *MessagePersistenceService_ChangeState_Call) Run(run func(ctx context.Context, messageID uuid.UUID, status persistmessage.MessageStatus)) *MessagePersistenceService_ChangeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(persistmessage.MessageStatus))
	})
	return _c
}

func (_c *MessagePersistenceService_ChangeState_Call) Return(_a0 error) *MessagePersistenceService_ChangeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_ChangeState_Call) RunAndReturn(run func(context.Context, uuid.UUID, persistmessage.MessageStatus) error) *MessagePersistenceService_ChangeState_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupMessages provides a mock function with given fields: ctx
func (_m *MessagePersistenceService) CleanupMessages(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanupMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_CleanupMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupMessages'
type MessagePersistenceService_CleanupMessages_Call struct {
	*mock.Call
}

// CleanupMessages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MessagePersistenceService_Expecter) CleanupMessages(ctx interface{}) *MessagePersistenceService_CleanupMessages_Call {
	return &MessagePersistenceService_CleanupMessages_Call{Call: _e.mock.On("CleanupMessages", ctx)}
}

func (_c *MessagePersistenceService_CleanupMessages_Call) Run(run func(ctx context.Context)) *MessagePersistenceService_CleanupMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessagePersistenceService_CleanupMessages_Call) Return(_a0 error) *MessagePersistenceService_CleanupMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_CleanupMessages_Call) RunAndReturn(run func(context.Context) error) *MessagePersistenceService_CleanupMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActive provides a mock function with given fields: ctx
func (_m *MessagePersistenceService) GetAllActive(ctx context.Context) ([]*persistmessage.StoreMessage, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllActive")
	}

	var r0 []*persistmessage.StoreMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*persistmessage.StoreMessage, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*persistmessage.StoreMessage); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*persistmessage.StoreMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagePersistenceService_GetAllActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActive'
type MessagePersistenceService_GetAllActive_Call struct {
	*mock.Call
}

// GetAllActive is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MessagePersistenceService_Expecter) GetAllActive(ctx interface{}) *MessagePersistenceService_GetAllActive_Call {
	return &MessagePersistenceService_GetAllActive_Call{Call: _e.mock.On("GetAllActive", ctx)}
}

func (_c *MessagePersistenceService_GetAllActive_Call) Run(run func(ctx context.Context)) *MessagePersistenceService_GetAllActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessagePersistenceService_GetAllActive_Call) Return(_a0 []*persistmessage.StoreMessage, _a1 error) *MessagePersistenceService_GetAllActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagePersistenceService_GetAllActive_Call) RunAndReturn(run func(context.Context) ([]*persistmessage.StoreMessage, error)) *MessagePersistenceService_GetAllActive_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function with given fields: ctx, predicate
func (_m *MessagePersistenceService) GetByFilter(ctx context.Context, predicate func(*persistmessage.StoreMessage) bool) ([]*persistmessage.StoreMessage, error) {
	ret := _m.Called(ctx, predicate)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []*persistmessage.StoreMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*persistmessage.StoreMessage) bool) ([]*persistmessage.StoreMessage, error)); ok {
		return rf(ctx, predicate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(*persistmessage.StoreMessage) bool) []*persistmessage.StoreMessage); ok {
		r0 = rf(ctx, predicate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*persistmessage.StoreMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(*persistmessage.StoreMessage) bool) error); ok {
		r1 = rf(ctx, predicate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagePersistenceService_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type MessagePersistenceService_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - predicate func(*persistmessage.StoreMessage) bool
func (_e *MessagePersistenceService_Expecter) GetByFilter(ctx interface{}, predicate interface{}) *MessagePersistenceService_GetByFilter_Call {
	return &MessagePersistenceService_GetByFilter_Call{Call: _e.mock.On("GetByFilter", ctx, predicate)}
}

func (_c *MessagePersistenceService_GetByFilter_Call) Run(run func(ctx context.Context, predicate func(*persistmessage.StoreMessage) bool)) *MessagePersistenceService_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(*persistmessage.StoreMessage) bool))
	})
	return _c
}

func (_c *MessagePersistenceService_GetByFilter_Call) Return(_a0 []*persistmessage.StoreMessage, _a1 error) *MessagePersistenceService_GetByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagePersistenceService_GetByFilter_Call) RunAndReturn(run func(context.Context, func(*persistmessage.StoreMessage) bool) ([]*persistmessage.StoreMessage, error)) *MessagePersistenceService_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MessagePersistenceService) GetById(ctx context.Context, id uuid.UUID) (*persistmessage.StoreMessage, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *persistmessage.StoreMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*persistmessage.StoreMessage, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *persistmessage.StoreMessage); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistmessage.StoreMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagePersistenceService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MessagePersistenceService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MessagePersistenceService_Expecter) GetById(ctx interface{}, id interface{}) *MessagePersistenceService_GetById_Call {
	return &MessagePersistenceService_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MessagePersistenceService_GetById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MessagePersistenceService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MessagePersistenceService_GetById_Call) Return(_a0 *persistmessage.StoreMessage, _a1 error) *MessagePersistenceService_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagePersistenceService_GetById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*persistmessage.StoreMessage, error)) *MessagePersistenceService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: messageID, ctx
func (_m *MessagePersistenceService) Process(messageID string, ctx context.Context) error {
	ret := _m.Called(messageID, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(messageID, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MessagePersistenceService_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - messageID string
//   - ctx context.Context
func (_e *MessagePersistenceService_Expecter) Process(messageID interface{}, ctx interface{}) *MessagePersistenceService_Process_Call {
	return &MessagePersistenceService_Process_Call{Call: _e.mock.On("Process", messageID, ctx)}
}

func (_c *MessagePersistenceService_Process_Call) Run(run func(messageID string, ctx context.Context)) *MessagePersistenceService_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context))
	})
	return _c
}

func (_c *MessagePersistenceService_Process_Call) Return(_a0 error) *MessagePersistenceService_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_Process_Call) RunAndReturn(run func(string, context.Context) error) *MessagePersistenceService_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessAll provides a mock function with given fields: ctx
func (_m *MessagePersistenceService) ProcessAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_ProcessAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAll'
type MessagePersistenceService_ProcessAll_Call struct {
	*mock.Call
}

// ProcessAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MessagePersistenceService_Expecter) ProcessAll(ctx interface{}) *MessagePersistenceService_ProcessAll_Call {
	return &MessagePersistenceService_ProcessAll_Call{Call: _e.mock.On("ProcessAll", ctx)}
}

func (_c *MessagePersistenceService_ProcessAll_Call) Run(run func(ctx context.Context)) *MessagePersistenceService_ProcessAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessagePersistenceService_ProcessAll_Call) Return(_a0 error) *MessagePersistenceService_ProcessAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_ProcessAll_Call) RunAndReturn(run func(context.Context) error) *MessagePersistenceService_ProcessAll_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, storeMessage
func (_m *MessagePersistenceService) Remove(ctx context.Context, storeMessage *persistmessage.StoreMessage) (bool, error) {
	ret := _m.Called(ctx, storeMessage)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *persistmessage.StoreMessage) (bool, error)); ok {
		return rf(ctx, storeMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *persistmessage.StoreMessage) bool); ok {
		r0 = rf(ctx, storeMessage)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *persistmessage.StoreMessage) error); ok {
		r1 = rf(ctx, storeMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagePersistenceService_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MessagePersistenceService_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - storeMessage *persistmessage.StoreMessage
func (_e *MessagePersistenceService_Expecter) Remove(ctx interface{}, storeMessage interface{}) *MessagePersistenceService_Remove_Call {
	return &MessagePersistenceService_Remove_Call{Call: _e.mock.On("Remove", ctx, storeMessage)}
}

func (_c *MessagePersistenceService_Remove_Call) Run(run func(ctx context.Context, storeMessage *persistmessage.StoreMessage)) *MessagePersistenceService_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*persistmessage.StoreMessage))
	})
	return _c
}

func (_c *MessagePersistenceService_Remove_Call) Return(_a0 bool, _a1 error) *MessagePersistenceService_Remove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagePersistenceService_Remove_Call) RunAndReturn(run func(context.Context, *persistmessage.StoreMessage) (bool, error)) *MessagePersistenceService_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, storeMessage
func (_m *MessagePersistenceService) Update(ctx context.Context, storeMessage *persistmessage.StoreMessage) error {
	ret := _m.Called(ctx, storeMessage)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *persistmessage.StoreMessage) error); ok {
		r0 = rf(ctx, storeMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePersistenceService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MessagePersistenceService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - storeMessage *persistmessage.StoreMessage
func (_e *MessagePersistenceService_Expecter) Update(ctx interface{}, storeMessage interface{}) *MessagePersistenceService_Update_Call {
	return &MessagePersistenceService_Update_Call{Call: _e.mock.On("Update", ctx, storeMessage)}
}

func (_c *MessagePersistenceService_Update_Call) Run(run func(ctx context.Context, storeMessage *persistmessage.StoreMessage)) *MessagePersistenceService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*persistmessage.StoreMessage))
	})
	return _c
}

func (_c *MessagePersistenceService_Update_Call) Return(_a0 error) *MessagePersistenceService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePersistenceService_Update_Call) RunAndReturn(run func(context.Context, *persistmessage.StoreMessage) error) *MessagePersistenceService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessagePersistenceService creates a new instance of MessagePersistenceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagePersistenceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagePersistenceService {
	mock := &MessagePersistenceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
