// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	domain "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/core/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/satori/go.uuid"
)

// IDomainEvent is an autogenerated mock type for the IDomainEvent type
type IDomainEvent struct {
	mock.Mock
}

type IDomainEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *IDomainEvent) EXPECT() *IDomainEvent_Expecter {
	return &IDomainEvent_Expecter{mock: &_m.Mock}
}

// GetAggregateId provides a mock function with given fields:
func (_m *IDomainEvent) GetAggregateId() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// IDomainEvent_GetAggregateId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregateId'
type IDomainEvent_GetAggregateId_Call struct {
	*mock.Call
}

// GetAggregateId is a helper method to define mock.On call
func (_e *IDomainEvent_Expecter) GetAggregateId() *IDomainEvent_GetAggregateId_Call {
	return &IDomainEvent_GetAggregateId_Call{Call: _e.mock.On("GetAggregateId")}
}

func (_c *IDomainEvent_GetAggregateId_Call) Run(run func()) *IDomainEvent_GetAggregateId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDomainEvent_GetAggregateId_Call) Return(_a0 uuid.UUID) *IDomainEvent_GetAggregateId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDomainEvent_GetAggregateId_Call) RunAndReturn(run func() uuid.UUID) *IDomainEvent_GetAggregateId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAggregateSequenceNumber provides a mock function with given fields:
func (_m *IDomainEvent) GetAggregateSequenceNumber() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IDomainEvent_GetAggregateSequenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregateSequenceNumber'
type IDomainEvent_GetAggregateSequenceNumber_Call struct {
	*mock.Call
}

// GetAggregateSequenceNumber is a helper method to define mock.On call
func (_e *IDomainEvent_Expecter) GetAggregateSequenceNumber() *IDomainEvent_GetAggregateSequenceNumber_Call {
	return &IDomainEvent_GetAggregateSequenceNumber_Call{Call: _e.mock.On("GetAggregateSequenceNumber")}
}

func (_c *IDomainEvent_GetAggregateSequenceNumber_Call) Run(run func()) *IDomainEvent_GetAggregateSequenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDomainEvent_GetAggregateSequenceNumber_Call) Return(_a0 int64) *IDomainEvent_GetAggregateSequenceNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDomainEvent_GetAggregateSequenceNumber_Call) RunAndReturn(run func() int64) *IDomainEvent_GetAggregateSequenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventId provides a mock function with given fields:
func (_m *IDomainEvent) GetEventId() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// IDomainEvent_GetEventId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventId'
type IDomainEvent_GetEventId_Call struct {
	*mock.Call
}

// GetEventId is a helper method to define mock.On call
func (_e *IDomainEvent_Expecter) GetEventId() *IDomainEvent_GetEventId_Call {
	return &IDomainEvent_GetEventId_Call{Call: _e.mock.On("GetEventId")}
}

func (_c *IDomainEvent_GetEventId_Call) Run(run func()) *IDomainEvent_GetEventId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDomainEvent_GetEventId_Call) Return(_a0 uuid.UUID) *IDomainEvent_GetEventId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDomainEvent_GetEventId_Call) RunAndReturn(run func() uuid.UUID) *IDomainEvent_GetEventId_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventType provides a mock function with given fields:
func (_m *IDomainEvent) GetEventType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IDomainEvent_GetEventType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventType'
type IDomainEvent_GetEventType_Call struct {
	*mock.Call
}

// GetEventType is a helper method to define mock.On call
func (_e *IDomainEvent_Expecter) GetEventType() *IDomainEvent_GetEventType_Call {
	return &IDomainEvent_GetEventType_Call{Call: _e.mock.On("GetEventType")}
}

func (_c *IDomainEvent_GetEventType_Call) Run(run func()) *IDomainEvent_GetEventType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDomainEvent_GetEventType_Call) Return(_a0 string) *IDomainEvent_GetEventType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDomainEvent_GetEventType_Call) RunAndReturn(run func() string) *IDomainEvent_GetEventType_Call {
	_c.Call.Return(run)
	return _c
}

// GetOccurredOn provides a mock function with given fields:
func (_m *IDomainEvent) GetOccurredOn() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IDomainEvent_GetOccurredOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOccurredOn'
type IDomainEvent_GetOccurredOn_Call struct {
	*mock.Call
}

// GetOccurredOn is a helper method to define mock.On call
func (_e *IDomainEvent_Expecter) GetOccurredOn() *IDomainEvent_GetOccurredOn_Call {
	return &IDomainEvent_GetOccurredOn_Call{Call: _e.mock.On("GetOccurredOn")}
}

func (_c *IDomainEvent_GetOccurredOn_Call) Run(run func()) *IDomainEvent_GetOccurredOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDomainEvent_GetOccurredOn_Call) Return(_a0 time.Time) *IDomainEvent_GetOccurredOn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDomainEvent_GetOccurredOn_Call) RunAndReturn(run func() time.Time) *IDomainEvent_GetOccurredOn_Call {
	_c.Call.Return(run)
	return _c
}

// WithAggregate provides a mock function with given fields: aggregateId, aggregateSequenceNumber
func (_m *IDomainEvent) WithAggregate(aggregateId uuid.UUID, aggregateSequenceNumber int64) *domain.DomainEvent {
	ret := _m.Called(aggregateId, aggregateSequenceNumber)

	var r0 *domain.DomainEvent
	if rf, ok := ret.Get(0).(func(uuid.UUID, int64) *domain.DomainEvent); ok {
		r0 = rf(aggregateId, aggregateSequenceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DomainEvent)
		}
	}

	return r0
}

// IDomainEvent_WithAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithAggregate'
type IDomainEvent_WithAggregate_Call struct {
	*mock.Call
}

// WithAggregate is a helper method to define mock.On call
//   - aggregateId uuid.UUID
//   - aggregateSequenceNumber int64
func (_e *IDomainEvent_Expecter) WithAggregate(aggregateId interface{}, aggregateSequenceNumber interface{}) *IDomainEvent_WithAggregate_Call {
	return &IDomainEvent_WithAggregate_Call{Call: _e.mock.On("WithAggregate", aggregateId, aggregateSequenceNumber)}
}

func (_c *IDomainEvent_WithAggregate_Call) Run(run func(aggregateId uuid.UUID, aggregateSequenceNumber int64)) *IDomainEvent_WithAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(int64))
	})
	return _c
}

func (_c *IDomainEvent_WithAggregate_Call) Return(_a0 *domain.DomainEvent) *IDomainEvent_WithAggregate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDomainEvent_WithAggregate_Call) RunAndReturn(run func(uuid.UUID, int64) *domain.DomainEvent) *IDomainEvent_WithAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// NewIDomainEvent creates a new instance of IDomainEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDomainEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDomainEvent {
	mock := &IDomainEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
