// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// IEntity is an autogenerated mock type for the IEntity type
type IEntity struct {
	mock.Mock
}

type IEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *IEntity) EXPECT() *IEntity_Expecter {
	return &IEntity_Expecter{mock: &_m.Mock}
}

// CreatedAt provides a mock function with given fields:
func (_m *IEntity) CreatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IEntity_CreatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatedAt'
type IEntity_CreatedAt_Call struct {
	*mock.Call
}

// CreatedAt is a helper method to define mock.On call
func (_e *IEntity_Expecter) CreatedAt() *IEntity_CreatedAt_Call {
	return &IEntity_CreatedAt_Call{Call: _e.mock.On("CreatedAt")}
}

func (_c *IEntity_CreatedAt_Call) Run(run func()) *IEntity_CreatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEntity_CreatedAt_Call) Return(_a0 time.Time) *IEntity_CreatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEntity_CreatedAt_Call) RunAndReturn(run func() time.Time) *IEntity_CreatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *IEntity) Id() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// IEntity_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type IEntity_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *IEntity_Expecter) Id() *IEntity_Id_Call {
	return &IEntity_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *IEntity_Id_Call) Run(run func()) *IEntity_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEntity_Id_Call) Return(_a0 uuid.UUID) *IEntity_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEntity_Id_Call) RunAndReturn(run func() uuid.UUID) *IEntity_Id_Call {
	_c.Call.Return(run)
	return _c
}

// SetEntityType provides a mock function with given fields: entityType
func (_m *IEntity) SetEntityType(entityType string) {
	_m.Called(entityType)
}

// IEntity_SetEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEntityType'
type IEntity_SetEntityType_Call struct {
	*mock.Call
}

// SetEntityType is a helper method to define mock.On call
//   - entityType string
func (_e *IEntity_Expecter) SetEntityType(entityType interface{}) *IEntity_SetEntityType_Call {
	return &IEntity_SetEntityType_Call{Call: _e.mock.On("SetEntityType", entityType)}
}

func (_c *IEntity_SetEntityType_Call) Run(run func(entityType string)) *IEntity_SetEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IEntity_SetEntityType_Call) Return() *IEntity_SetEntityType_Call {
	_c.Call.Return()
	return _c
}

func (_c *IEntity_SetEntityType_Call) RunAndReturn(run func(string)) *IEntity_SetEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// SetId provides a mock function with given fields: id
func (_m *IEntity) SetId(id uuid.UUID) {
	_m.Called(id)
}

// IEntity_SetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetId'
type IEntity_SetId_Call struct {
	*mock.Call
}

// SetId is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *IEntity_Expecter) SetId(id interface{}) *IEntity_SetId_Call {
	return &IEntity_SetId_Call{Call: _e.mock.On("SetId", id)}
}

func (_c *IEntity_SetId_Call) Run(run func(id uuid.UUID)) *IEntity_SetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *IEntity_SetId_Call) Return() *IEntity_SetId_Call {
	_c.Call.Return()
	return _c
}

func (_c *IEntity_SetId_Call) RunAndReturn(run func(uuid.UUID)) *IEntity_SetId_Call {
	_c.Call.Return(run)
	return _c
}

// SetUpdatedAt provides a mock function with given fields: updatedAt
func (_m *IEntity) SetUpdatedAt(updatedAt time.Time) {
	_m.Called(updatedAt)
}

// IEntity_SetUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUpdatedAt'
type IEntity_SetUpdatedAt_Call struct {
	*mock.Call
}

// SetUpdatedAt is a helper method to define mock.On call
//   - updatedAt time.Time
func (_e *IEntity_Expecter) SetUpdatedAt(updatedAt interface{}) *IEntity_SetUpdatedAt_Call {
	return &IEntity_SetUpdatedAt_Call{Call: _e.mock.On("SetUpdatedAt", updatedAt)}
}

func (_c *IEntity_SetUpdatedAt_Call) Run(run func(updatedAt time.Time)) *IEntity_SetUpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *IEntity_SetUpdatedAt_Call) Return() *IEntity_SetUpdatedAt_Call {
	_c.Call.Return()
	return _c
}

func (_c *IEntity_SetUpdatedAt_Call) RunAndReturn(run func(time.Time)) *IEntity_SetUpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatedAt provides a mock function with given fields:
func (_m *IEntity) UpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IEntity_UpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatedAt'
type IEntity_UpdatedAt_Call struct {
	*mock.Call
}

// UpdatedAt is a helper method to define mock.On call
func (_e *IEntity_Expecter) UpdatedAt() *IEntity_UpdatedAt_Call {
	return &IEntity_UpdatedAt_Call{Call: _e.mock.On("UpdatedAt")}
}

func (_c *IEntity_UpdatedAt_Call) Run(run func()) *IEntity_UpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEntity_UpdatedAt_Call) Return(_a0 time.Time) *IEntity_UpdatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEntity_UpdatedAt_Call) RunAndReturn(run func() time.Time) *IEntity_UpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEntity creates a new instance of IEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEntity {
	mock := &IEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
