// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// IEvent is an autogenerated mock type for the IEvent type
type IEvent struct {
	mock.Mock
}

type IEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *IEvent) EXPECT() *IEvent_Expecter {
	return &IEvent_Expecter{mock: &_m.Mock}
}

// GetEventId provides a mock function with given fields:
func (_m *IEvent) GetEventId() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// IEvent_GetEventId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventId'
type IEvent_GetEventId_Call struct {
	*mock.Call
}

// GetEventId is a helper method to define mock.On call
func (_e *IEvent_Expecter) GetEventId() *IEvent_GetEventId_Call {
	return &IEvent_GetEventId_Call{Call: _e.mock.On("GetEventId")}
}

func (_c *IEvent_GetEventId_Call) Run(run func()) *IEvent_GetEventId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEvent_GetEventId_Call) Return(_a0 uuid.UUID) *IEvent_GetEventId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEvent_GetEventId_Call) RunAndReturn(run func() uuid.UUID) *IEvent_GetEventId_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventType provides a mock function with given fields:
func (_m *IEvent) GetEventType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IEvent_GetEventType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventType'
type IEvent_GetEventType_Call struct {
	*mock.Call
}

// GetEventType is a helper method to define mock.On call
func (_e *IEvent_Expecter) GetEventType() *IEvent_GetEventType_Call {
	return &IEvent_GetEventType_Call{Call: _e.mock.On("GetEventType")}
}

func (_c *IEvent_GetEventType_Call) Run(run func()) *IEvent_GetEventType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEvent_GetEventType_Call) Return(_a0 string) *IEvent_GetEventType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEvent_GetEventType_Call) RunAndReturn(run func() string) *IEvent_GetEventType_Call {
	_c.Call.Return(run)
	return _c
}

// GetOccurredOn provides a mock function with given fields:
func (_m *IEvent) GetOccurredOn() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IEvent_GetOccurredOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOccurredOn'
type IEvent_GetOccurredOn_Call struct {
	*mock.Call
}

// GetOccurredOn is a helper method to define mock.On call
func (_e *IEvent_Expecter) GetOccurredOn() *IEvent_GetOccurredOn_Call {
	return &IEvent_GetOccurredOn_Call{Call: _e.mock.On("GetOccurredOn")}
}

func (_c *IEvent_GetOccurredOn_Call) Run(run func()) *IEvent_GetOccurredOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEvent_GetOccurredOn_Call) Return(_a0 time.Time) *IEvent_GetOccurredOn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEvent_GetOccurredOn_Call) RunAndReturn(run func() time.Time) *IEvent_GetOccurredOn_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEvent creates a new instance of IEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEvent {
	mock := &IEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
