// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Specification is an autogenerated mock type for the Specification type
type Specification struct {
	mock.Mock
}

type Specification_Expecter struct {
	mock *mock.Mock
}

func (_m *Specification) EXPECT() *Specification_Expecter {
	return &Specification_Expecter{mock: &_m.Mock}
}

// GetQuery provides a mock function with given fields:
func (_m *Specification) GetQuery() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Specification_GetQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuery'
type Specification_GetQuery_Call struct {
	*mock.Call
}

// GetQuery is a helper method to define mock.On call
func (_e *Specification_Expecter) GetQuery() *Specification_GetQuery_Call {
	return &Specification_GetQuery_Call{Call: _e.mock.On("GetQuery")}
}

func (_c *Specification_GetQuery_Call) Run(run func()) *Specification_GetQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Specification_GetQuery_Call) Return(_a0 string) *Specification_GetQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Specification_GetQuery_Call) RunAndReturn(run func() string) *Specification_GetQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetValues provides a mock function with given fields:
func (_m *Specification) GetValues() []interface{} {
	ret := _m.Called()

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Specification_GetValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValues'
type Specification_GetValues_Call struct {
	*mock.Call
}

// GetValues is a helper method to define mock.On call
func (_e *Specification_Expecter) GetValues() *Specification_GetValues_Call {
	return &Specification_GetValues_Call{Call: _e.mock.On("GetValues")}
}

func (_c *Specification_GetValues_Call) Run(run func()) *Specification_GetValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Specification_GetValues_Call) Return(_a0 []interface{}) *Specification_GetValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Specification_GetValues_Call) RunAndReturn(run func() []interface{}) *Specification_GetValues_Call {
	_c.Call.Return(run)
	return _c
}

// NewSpecification creates a new instance of Specification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpecification(t interface {
	mock.TestingT
	Cleanup(func())
}) *Specification {
	mock := &Specification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
