// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"

	serializer "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/core/serializer"
)

// EventSerializer is an autogenerated mock type for the EventSerializer type
type EventSerializer struct {
	mock.Mock
}

// ContentType provides a mock function with given fields:
func (_m *EventSerializer) ContentType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Deserialize provides a mock function with given fields: data, eventType, contentType
func (_m *EventSerializer) Deserialize(data []byte, eventType string, contentType string) (interface{}, error) {
	ret := _m.Called(data, eventType, contentType)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte, string, string) interface{}); ok {
		r0 = rf(data, eventType, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string, string) error); ok {
		r1 = rf(data, eventType, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeserializeEvent provides a mock function with given fields: data, eventType, contentType
func (_m *EventSerializer) DeserializeEvent(data []byte, eventType string, contentType string) (interface{}, error) {
	ret := _m.Called(data, eventType, contentType)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte, string, string) interface{}); ok {
		r0 = rf(data, eventType, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string, string) error); ok {
		r1 = rf(data, eventType, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeserializeMessage provides a mock function with given fields: data, eventType, contentType
func (_m *EventSerializer) DeserializeMessage(data []byte, eventType string, contentType string) (interface{}, error) {
	ret := _m.Called(data, eventType, contentType)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte, string, string) interface{}); ok {
		r0 = rf(data, eventType, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string, string) error); ok {
		r1 = rf(data, eventType, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeserializeType provides a mock function with given fields: data, eventType, contentType
func (_m *EventSerializer) DeserializeType(data []byte, eventType reflect.Type, contentType string) (interface{}, error) {
	ret := _m.Called(data, eventType, contentType)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte, reflect.Type, string) interface{}); ok {
		r0 = rf(data, eventType, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, reflect.Type, string) error); ok {
		r1 = rf(data, eventType, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Serialize provides a mock function with given fields: event
func (_m *EventSerializer) Serialize(event interface{}) (*serializer.EventSerializationResult, error) {
	ret := _m.Called(event)

	var r0 *serializer.EventSerializationResult
	if rf, ok := ret.Get(0).(func(interface{}) *serializer.EventSerializationResult); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serializer.EventSerializationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventSerializer interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventSerializer creates a new instance of EventSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventSerializer(t mockConstructorTestingTNewEventSerializer) *EventSerializer {
	mock := &EventSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
