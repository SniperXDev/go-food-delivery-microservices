// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	domain "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// When is an autogenerated mock type for the When type
type When struct {
	mock.Mock
}

type When_Expecter struct {
	mock *mock.Mock
}

func (_m *When) EXPECT() *When_Expecter {
	return &When_Expecter{mock: &_m.Mock}
}

// When provides a mock function with given fields: event
func (_m *When) When(event domain.IDomainEvent) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IDomainEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// When_When_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'When'
type When_When_Call struct {
	*mock.Call
}

// When is a helper method to define mock.On call
//   - event domain.IDomainEvent
func (_e *When_Expecter) When(event interface{}) *When_When_Call {
	return &When_When_Call{Call: _e.mock.On("When", event)}
}

func (_c *When_When_Call) Run(run func(event domain.IDomainEvent)) *When_When_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.IDomainEvent))
	})
	return _c
}

func (_c *When_When_Call) Return(_a0 error) *When_When_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *When_When_Call) RunAndReturn(run func(domain.IDomainEvent) error) *When_When_Call {
	_c.Call.Return(run)
	return _c
}

// NewWhen creates a new instance of When. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWhen(t interface {
	mock.TestingT
	Cleanup(func())
}) *When {
	mock := &When{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
