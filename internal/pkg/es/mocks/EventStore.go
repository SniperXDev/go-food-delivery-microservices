// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	appendResult "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models/append_result"

	expectedStreamVersion "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models/stream_version"

	mock "github.com/stretchr/testify/mock"

	models "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models"

	readPosition "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models/stream_position/read_position"

	streamName "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models/stream_name"

	truncatePosition "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models/stream_position/truncatePosition"
)

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

type EventStore_Expecter struct {
	mock *mock.Mock
}

func (_m *EventStore) EXPECT() *EventStore_Expecter {
	return &EventStore_Expecter{mock: &_m.Mock}
}

// AppendEvents provides a mock function with given fields: _a0, expectedVersion, events, ctx
func (_m *EventStore) AppendEvents(_a0 streamName.StreamName, expectedVersion expectedStreamVersion.ExpectedStreamVersion, events []*models.StreamEvent, ctx context.Context) (*appendResult.AppendEventsResult, error) {
	ret := _m.Called(_a0, expectedVersion, events, ctx)

	var r0 *appendResult.AppendEventsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, expectedStreamVersion.ExpectedStreamVersion, []*models.StreamEvent, context.Context) (*appendResult.AppendEventsResult, error)); ok {
		return rf(_a0, expectedVersion, events, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, expectedStreamVersion.ExpectedStreamVersion, []*models.StreamEvent, context.Context) *appendResult.AppendEventsResult); ok {
		r0 = rf(_a0, expectedVersion, events, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appendResult.AppendEventsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, expectedStreamVersion.ExpectedStreamVersion, []*models.StreamEvent, context.Context) error); ok {
		r1 = rf(_a0, expectedVersion, events, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_AppendEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendEvents'
type EventStore_AppendEvents_Call struct {
	*mock.Call
}

// AppendEvents is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - expectedVersion expectedStreamVersion.ExpectedStreamVersion
//   - events []*models.StreamEvent
//   - ctx context.Context
func (_e *EventStore_Expecter) AppendEvents(_a0 interface{}, expectedVersion interface{}, events interface{}, ctx interface{}) *EventStore_AppendEvents_Call {
	return &EventStore_AppendEvents_Call{Call: _e.mock.On("AppendEvents", _a0, expectedVersion, events, ctx)}
}

func (_c *EventStore_AppendEvents_Call) Run(run func(_a0 streamName.StreamName, expectedVersion expectedStreamVersion.ExpectedStreamVersion, events []*models.StreamEvent, ctx context.Context)) *EventStore_AppendEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(expectedStreamVersion.ExpectedStreamVersion), args[2].([]*models.StreamEvent), args[3].(context.Context))
	})
	return _c
}

func (_c *EventStore_AppendEvents_Call) Return(_a0 *appendResult.AppendEventsResult, _a1 error) *EventStore_AppendEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_AppendEvents_Call) RunAndReturn(run func(streamName.StreamName, expectedStreamVersion.ExpectedStreamVersion, []*models.StreamEvent, context.Context) (*appendResult.AppendEventsResult, error)) *EventStore_AppendEvents_Call {
	_c.Call.Return(run)
	return _c
}

// AppendNewEvents provides a mock function with given fields: _a0, events, ctx
func (_m *EventStore) AppendNewEvents(_a0 streamName.StreamName, events []*models.StreamEvent, ctx context.Context) (*appendResult.AppendEventsResult, error) {
	ret := _m.Called(_a0, events, ctx)

	var r0 *appendResult.AppendEventsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, []*models.StreamEvent, context.Context) (*appendResult.AppendEventsResult, error)); ok {
		return rf(_a0, events, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, []*models.StreamEvent, context.Context) *appendResult.AppendEventsResult); ok {
		r0 = rf(_a0, events, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appendResult.AppendEventsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, []*models.StreamEvent, context.Context) error); ok {
		r1 = rf(_a0, events, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_AppendNewEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendNewEvents'
type EventStore_AppendNewEvents_Call struct {
	*mock.Call
}

// AppendNewEvents is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - events []*models.StreamEvent
//   - ctx context.Context
func (_e *EventStore_Expecter) AppendNewEvents(_a0 interface{}, events interface{}, ctx interface{}) *EventStore_AppendNewEvents_Call {
	return &EventStore_AppendNewEvents_Call{Call: _e.mock.On("AppendNewEvents", _a0, events, ctx)}
}

func (_c *EventStore_AppendNewEvents_Call) Run(run func(_a0 streamName.StreamName, events []*models.StreamEvent, ctx context.Context)) *EventStore_AppendNewEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].([]*models.StreamEvent), args[2].(context.Context))
	})
	return _c
}

func (_c *EventStore_AppendNewEvents_Call) Return(_a0 *appendResult.AppendEventsResult, _a1 error) *EventStore_AppendNewEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_AppendNewEvents_Call) RunAndReturn(run func(streamName.StreamName, []*models.StreamEvent, context.Context) (*appendResult.AppendEventsResult, error)) *EventStore_AppendNewEvents_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStream provides a mock function with given fields: _a0, expectedVersion, ctx
func (_m *EventStore) DeleteStream(_a0 streamName.StreamName, expectedVersion expectedStreamVersion.ExpectedStreamVersion, ctx context.Context) error {
	ret := _m.Called(_a0, expectedVersion, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, expectedStreamVersion.ExpectedStreamVersion, context.Context) error); ok {
		r0 = rf(_a0, expectedVersion, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventStore_DeleteStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStream'
type EventStore_DeleteStream_Call struct {
	*mock.Call
}

// DeleteStream is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - expectedVersion expectedStreamVersion.ExpectedStreamVersion
//   - ctx context.Context
func (_e *EventStore_Expecter) DeleteStream(_a0 interface{}, expectedVersion interface{}, ctx interface{}) *EventStore_DeleteStream_Call {
	return &EventStore_DeleteStream_Call{Call: _e.mock.On("DeleteStream", _a0, expectedVersion, ctx)}
}

func (_c *EventStore_DeleteStream_Call) Run(run func(_a0 streamName.StreamName, expectedVersion expectedStreamVersion.ExpectedStreamVersion, ctx context.Context)) *EventStore_DeleteStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(expectedStreamVersion.ExpectedStreamVersion), args[2].(context.Context))
	})
	return _c
}

func (_c *EventStore_DeleteStream_Call) Return(_a0 error) *EventStore_DeleteStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventStore_DeleteStream_Call) RunAndReturn(run func(streamName.StreamName, expectedStreamVersion.ExpectedStreamVersion, context.Context) error) *EventStore_DeleteStream_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEvents provides a mock function with given fields: _a0, _a1, count, ctx
func (_m *EventStore) ReadEvents(_a0 streamName.StreamName, _a1 readPosition.StreamReadPosition, count uint64, ctx context.Context) ([]*models.StreamEvent, error) {
	ret := _m.Called(_a0, _a1, count, ctx)

	var r0 []*models.StreamEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) ([]*models.StreamEvent, error)); ok {
		return rf(_a0, _a1, count, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) []*models.StreamEvent); ok {
		r0 = rf(_a0, _a1, count, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StreamEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) error); ok {
		r1 = rf(_a0, _a1, count, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_ReadEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEvents'
type EventStore_ReadEvents_Call struct {
	*mock.Call
}

// ReadEvents is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - _a1 readPosition.StreamReadPosition
//   - count uint64
//   - ctx context.Context
func (_e *EventStore_Expecter) ReadEvents(_a0 interface{}, _a1 interface{}, count interface{}, ctx interface{}) *EventStore_ReadEvents_Call {
	return &EventStore_ReadEvents_Call{Call: _e.mock.On("ReadEvents", _a0, _a1, count, ctx)}
}

func (_c *EventStore_ReadEvents_Call) Run(run func(_a0 streamName.StreamName, _a1 readPosition.StreamReadPosition, count uint64, ctx context.Context)) *EventStore_ReadEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(readPosition.StreamReadPosition), args[2].(uint64), args[3].(context.Context))
	})
	return _c
}

func (_c *EventStore_ReadEvents_Call) Return(_a0 []*models.StreamEvent, _a1 error) *EventStore_ReadEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_ReadEvents_Call) RunAndReturn(run func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) ([]*models.StreamEvent, error)) *EventStore_ReadEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEventsBackwards provides a mock function with given fields: _a0, _a1, count, ctx
func (_m *EventStore) ReadEventsBackwards(_a0 streamName.StreamName, _a1 readPosition.StreamReadPosition, count uint64, ctx context.Context) ([]*models.StreamEvent, error) {
	ret := _m.Called(_a0, _a1, count, ctx)

	var r0 []*models.StreamEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) ([]*models.StreamEvent, error)); ok {
		return rf(_a0, _a1, count, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) []*models.StreamEvent); ok {
		r0 = rf(_a0, _a1, count, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StreamEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) error); ok {
		r1 = rf(_a0, _a1, count, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_ReadEventsBackwards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEventsBackwards'
type EventStore_ReadEventsBackwards_Call struct {
	*mock.Call
}

// ReadEventsBackwards is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - _a1 readPosition.StreamReadPosition
//   - count uint64
//   - ctx context.Context
func (_e *EventStore_Expecter) ReadEventsBackwards(_a0 interface{}, _a1 interface{}, count interface{}, ctx interface{}) *EventStore_ReadEventsBackwards_Call {
	return &EventStore_ReadEventsBackwards_Call{Call: _e.mock.On("ReadEventsBackwards", _a0, _a1, count, ctx)}
}

func (_c *EventStore_ReadEventsBackwards_Call) Run(run func(_a0 streamName.StreamName, _a1 readPosition.StreamReadPosition, count uint64, ctx context.Context)) *EventStore_ReadEventsBackwards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(readPosition.StreamReadPosition), args[2].(uint64), args[3].(context.Context))
	})
	return _c
}

func (_c *EventStore_ReadEventsBackwards_Call) Return(_a0 []*models.StreamEvent, _a1 error) *EventStore_ReadEventsBackwards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_ReadEventsBackwards_Call) RunAndReturn(run func(streamName.StreamName, readPosition.StreamReadPosition, uint64, context.Context) ([]*models.StreamEvent, error)) *EventStore_ReadEventsBackwards_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEventsBackwardsFromEnd provides a mock function with given fields: _a0, count, ctx
func (_m *EventStore) ReadEventsBackwardsFromEnd(_a0 streamName.StreamName, count uint64, ctx context.Context) ([]*models.StreamEvent, error) {
	ret := _m.Called(_a0, count, ctx)

	var r0 []*models.StreamEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, uint64, context.Context) ([]*models.StreamEvent, error)); ok {
		return rf(_a0, count, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, uint64, context.Context) []*models.StreamEvent); ok {
		r0 = rf(_a0, count, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StreamEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, uint64, context.Context) error); ok {
		r1 = rf(_a0, count, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_ReadEventsBackwardsFromEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEventsBackwardsFromEnd'
type EventStore_ReadEventsBackwardsFromEnd_Call struct {
	*mock.Call
}

// ReadEventsBackwardsFromEnd is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - count uint64
//   - ctx context.Context
func (_e *EventStore_Expecter) ReadEventsBackwardsFromEnd(_a0 interface{}, count interface{}, ctx interface{}) *EventStore_ReadEventsBackwardsFromEnd_Call {
	return &EventStore_ReadEventsBackwardsFromEnd_Call{Call: _e.mock.On("ReadEventsBackwardsFromEnd", _a0, count, ctx)}
}

func (_c *EventStore_ReadEventsBackwardsFromEnd_Call) Run(run func(_a0 streamName.StreamName, count uint64, ctx context.Context)) *EventStore_ReadEventsBackwardsFromEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(uint64), args[2].(context.Context))
	})
	return _c
}

func (_c *EventStore_ReadEventsBackwardsFromEnd_Call) Return(_a0 []*models.StreamEvent, _a1 error) *EventStore_ReadEventsBackwardsFromEnd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_ReadEventsBackwardsFromEnd_Call) RunAndReturn(run func(streamName.StreamName, uint64, context.Context) ([]*models.StreamEvent, error)) *EventStore_ReadEventsBackwardsFromEnd_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEventsBackwardsWithMaxCount provides a mock function with given fields: stream, _a1, ctx
func (_m *EventStore) ReadEventsBackwardsWithMaxCount(stream streamName.StreamName, _a1 readPosition.StreamReadPosition, ctx context.Context) ([]*models.StreamEvent, error) {
	ret := _m.Called(stream, _a1, ctx)

	var r0 []*models.StreamEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) ([]*models.StreamEvent, error)); ok {
		return rf(stream, _a1, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) []*models.StreamEvent); ok {
		r0 = rf(stream, _a1, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StreamEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) error); ok {
		r1 = rf(stream, _a1, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_ReadEventsBackwardsWithMaxCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEventsBackwardsWithMaxCount'
type EventStore_ReadEventsBackwardsWithMaxCount_Call struct {
	*mock.Call
}

// ReadEventsBackwardsWithMaxCount is a helper method to define mock.On call
//   - stream streamName.StreamName
//   - _a1 readPosition.StreamReadPosition
//   - ctx context.Context
func (_e *EventStore_Expecter) ReadEventsBackwardsWithMaxCount(stream interface{}, _a1 interface{}, ctx interface{}) *EventStore_ReadEventsBackwardsWithMaxCount_Call {
	return &EventStore_ReadEventsBackwardsWithMaxCount_Call{Call: _e.mock.On("ReadEventsBackwardsWithMaxCount", stream, _a1, ctx)}
}

func (_c *EventStore_ReadEventsBackwardsWithMaxCount_Call) Run(run func(stream streamName.StreamName, _a1 readPosition.StreamReadPosition, ctx context.Context)) *EventStore_ReadEventsBackwardsWithMaxCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(readPosition.StreamReadPosition), args[2].(context.Context))
	})
	return _c
}

func (_c *EventStore_ReadEventsBackwardsWithMaxCount_Call) Return(_a0 []*models.StreamEvent, _a1 error) *EventStore_ReadEventsBackwardsWithMaxCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_ReadEventsBackwardsWithMaxCount_Call) RunAndReturn(run func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) ([]*models.StreamEvent, error)) *EventStore_ReadEventsBackwardsWithMaxCount_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEventsFromStart provides a mock function with given fields: _a0, count, ctx
func (_m *EventStore) ReadEventsFromStart(_a0 streamName.StreamName, count uint64, ctx context.Context) ([]*models.StreamEvent, error) {
	ret := _m.Called(_a0, count, ctx)

	var r0 []*models.StreamEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, uint64, context.Context) ([]*models.StreamEvent, error)); ok {
		return rf(_a0, count, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, uint64, context.Context) []*models.StreamEvent); ok {
		r0 = rf(_a0, count, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StreamEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, uint64, context.Context) error); ok {
		r1 = rf(_a0, count, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_ReadEventsFromStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEventsFromStart'
type EventStore_ReadEventsFromStart_Call struct {
	*mock.Call
}

// ReadEventsFromStart is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - count uint64
//   - ctx context.Context
func (_e *EventStore_Expecter) ReadEventsFromStart(_a0 interface{}, count interface{}, ctx interface{}) *EventStore_ReadEventsFromStart_Call {
	return &EventStore_ReadEventsFromStart_Call{Call: _e.mock.On("ReadEventsFromStart", _a0, count, ctx)}
}

func (_c *EventStore_ReadEventsFromStart_Call) Run(run func(_a0 streamName.StreamName, count uint64, ctx context.Context)) *EventStore_ReadEventsFromStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(uint64), args[2].(context.Context))
	})
	return _c
}

func (_c *EventStore_ReadEventsFromStart_Call) Return(_a0 []*models.StreamEvent, _a1 error) *EventStore_ReadEventsFromStart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_ReadEventsFromStart_Call) RunAndReturn(run func(streamName.StreamName, uint64, context.Context) ([]*models.StreamEvent, error)) *EventStore_ReadEventsFromStart_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEventsWithMaxCount provides a mock function with given fields: _a0, _a1, ctx
func (_m *EventStore) ReadEventsWithMaxCount(_a0 streamName.StreamName, _a1 readPosition.StreamReadPosition, ctx context.Context) ([]*models.StreamEvent, error) {
	ret := _m.Called(_a0, _a1, ctx)

	var r0 []*models.StreamEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) ([]*models.StreamEvent, error)); ok {
		return rf(_a0, _a1, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) []*models.StreamEvent); ok {
		r0 = rf(_a0, _a1, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StreamEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) error); ok {
		r1 = rf(_a0, _a1, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_ReadEventsWithMaxCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEventsWithMaxCount'
type EventStore_ReadEventsWithMaxCount_Call struct {
	*mock.Call
}

// ReadEventsWithMaxCount is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - _a1 readPosition.StreamReadPosition
//   - ctx context.Context
func (_e *EventStore_Expecter) ReadEventsWithMaxCount(_a0 interface{}, _a1 interface{}, ctx interface{}) *EventStore_ReadEventsWithMaxCount_Call {
	return &EventStore_ReadEventsWithMaxCount_Call{Call: _e.mock.On("ReadEventsWithMaxCount", _a0, _a1, ctx)}
}

func (_c *EventStore_ReadEventsWithMaxCount_Call) Run(run func(_a0 streamName.StreamName, _a1 readPosition.StreamReadPosition, ctx context.Context)) *EventStore_ReadEventsWithMaxCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(readPosition.StreamReadPosition), args[2].(context.Context))
	})
	return _c
}

func (_c *EventStore_ReadEventsWithMaxCount_Call) Return(_a0 []*models.StreamEvent, _a1 error) *EventStore_ReadEventsWithMaxCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_ReadEventsWithMaxCount_Call) RunAndReturn(run func(streamName.StreamName, readPosition.StreamReadPosition, context.Context) ([]*models.StreamEvent, error)) *EventStore_ReadEventsWithMaxCount_Call {
	_c.Call.Return(run)
	return _c
}

// StreamExists provides a mock function with given fields: _a0, ctx
func (_m *EventStore) StreamExists(_a0 streamName.StreamName, ctx context.Context) (bool, error) {
	ret := _m.Called(_a0, ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, context.Context) (bool, error)); ok {
		return rf(_a0, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, context.Context) bool); ok {
		r0 = rf(_a0, ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, context.Context) error); ok {
		r1 = rf(_a0, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_StreamExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamExists'
type EventStore_StreamExists_Call struct {
	*mock.Call
}

// StreamExists is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - ctx context.Context
func (_e *EventStore_Expecter) StreamExists(_a0 interface{}, ctx interface{}) *EventStore_StreamExists_Call {
	return &EventStore_StreamExists_Call{Call: _e.mock.On("StreamExists", _a0, ctx)}
}

func (_c *EventStore_StreamExists_Call) Run(run func(_a0 streamName.StreamName, ctx context.Context)) *EventStore_StreamExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(context.Context))
	})
	return _c
}

func (_c *EventStore_StreamExists_Call) Return(_a0 bool, _a1 error) *EventStore_StreamExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_StreamExists_Call) RunAndReturn(run func(streamName.StreamName, context.Context) (bool, error)) *EventStore_StreamExists_Call {
	_c.Call.Return(run)
	return _c
}

// TruncateStream provides a mock function with given fields: _a0, _a1, expectedVersion, ctx
func (_m *EventStore) TruncateStream(_a0 streamName.StreamName, _a1 truncatePosition.StreamTruncatePosition, expectedVersion expectedStreamVersion.ExpectedStreamVersion, ctx context.Context) (*appendResult.AppendEventsResult, error) {
	ret := _m.Called(_a0, _a1, expectedVersion, ctx)

	var r0 *appendResult.AppendEventsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(streamName.StreamName, truncatePosition.StreamTruncatePosition, expectedStreamVersion.ExpectedStreamVersion, context.Context) (*appendResult.AppendEventsResult, error)); ok {
		return rf(_a0, _a1, expectedVersion, ctx)
	}
	if rf, ok := ret.Get(0).(func(streamName.StreamName, truncatePosition.StreamTruncatePosition, expectedStreamVersion.ExpectedStreamVersion, context.Context) *appendResult.AppendEventsResult); ok {
		r0 = rf(_a0, _a1, expectedVersion, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appendResult.AppendEventsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(streamName.StreamName, truncatePosition.StreamTruncatePosition, expectedStreamVersion.ExpectedStreamVersion, context.Context) error); ok {
		r1 = rf(_a0, _a1, expectedVersion, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStore_TruncateStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TruncateStream'
type EventStore_TruncateStream_Call struct {
	*mock.Call
}

// TruncateStream is a helper method to define mock.On call
//   - _a0 streamName.StreamName
//   - _a1 truncatePosition.StreamTruncatePosition
//   - expectedVersion expectedStreamVersion.ExpectedStreamVersion
//   - ctx context.Context
func (_e *EventStore_Expecter) TruncateStream(_a0 interface{}, _a1 interface{}, expectedVersion interface{}, ctx interface{}) *EventStore_TruncateStream_Call {
	return &EventStore_TruncateStream_Call{Call: _e.mock.On("TruncateStream", _a0, _a1, expectedVersion, ctx)}
}

func (_c *EventStore_TruncateStream_Call) Run(run func(_a0 streamName.StreamName, _a1 truncatePosition.StreamTruncatePosition, expectedVersion expectedStreamVersion.ExpectedStreamVersion, ctx context.Context)) *EventStore_TruncateStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(streamName.StreamName), args[1].(truncatePosition.StreamTruncatePosition), args[2].(expectedStreamVersion.ExpectedStreamVersion), args[3].(context.Context))
	})
	return _c
}

func (_c *EventStore_TruncateStream_Call) Return(_a0 *appendResult.AppendEventsResult, _a1 error) *EventStore_TruncateStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventStore_TruncateStream_Call) RunAndReturn(run func(streamName.StreamName, truncatePosition.StreamTruncatePosition, expectedStreamVersion.ExpectedStreamVersion, context.Context) (*appendResult.AppendEventsResult, error)) *EventStore_TruncateStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventStore creates a new instance of EventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventStore {
	mock := &EventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
