// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/es/models"
	mock "github.com/stretchr/testify/mock"
)

// IProjection is an autogenerated mock type for the IProjection type
type IProjection struct {
	mock.Mock
}

type IProjection_Expecter struct {
	mock *mock.Mock
}

func (_m *IProjection) EXPECT() *IProjection_Expecter {
	return &IProjection_Expecter{mock: &_m.Mock}
}

// ProcessEvent provides a mock function with given fields: ctx, streamEvent
func (_m *IProjection) ProcessEvent(ctx context.Context, streamEvent *models.StreamEvent) error {
	ret := _m.Called(ctx, streamEvent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StreamEvent) error); ok {
		r0 = rf(ctx, streamEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IProjection_ProcessEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEvent'
type IProjection_ProcessEvent_Call struct {
	*mock.Call
}

// ProcessEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - streamEvent *models.StreamEvent
func (_e *IProjection_Expecter) ProcessEvent(ctx interface{}, streamEvent interface{}) *IProjection_ProcessEvent_Call {
	return &IProjection_ProcessEvent_Call{Call: _e.mock.On("ProcessEvent", ctx, streamEvent)}
}

func (_c *IProjection_ProcessEvent_Call) Run(run func(ctx context.Context, streamEvent *models.StreamEvent)) *IProjection_ProcessEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.StreamEvent))
	})
	return _c
}

func (_c *IProjection_ProcessEvent_Call) Return(_a0 error) *IProjection_ProcessEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IProjection_ProcessEvent_Call) RunAndReturn(run func(context.Context, *models.StreamEvent) error) *IProjection_ProcessEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewIProjection creates a new instance of IProjection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProjection(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProjection {
	mock := &IProjection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
