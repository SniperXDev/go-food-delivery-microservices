// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	domain "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// WhenFunc is an autogenerated mock type for the WhenFunc type
type WhenFunc struct {
	mock.Mock
}

type WhenFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *WhenFunc) EXPECT() *WhenFunc_Expecter {
	return &WhenFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: event
func (_m *WhenFunc) Execute(event domain.IDomainEvent) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IDomainEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WhenFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type WhenFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - event domain.IDomainEvent
func (_e *WhenFunc_Expecter) Execute(event interface{}) *WhenFunc_Execute_Call {
	return &WhenFunc_Execute_Call{Call: _e.mock.On("Execute", event)}
}

func (_c *WhenFunc_Execute_Call) Run(run func(event domain.IDomainEvent)) *WhenFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.IDomainEvent))
	})
	return _c
}

func (_c *WhenFunc_Execute_Call) Return(_a0 error) *WhenFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WhenFunc_Execute_Call) RunAndReturn(run func(domain.IDomainEvent) error) *WhenFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewWhenFunc creates a new instance of WhenFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWhenFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *WhenFunc {
	mock := &WhenFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
