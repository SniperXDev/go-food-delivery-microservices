// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionCheckpointRepository is an autogenerated mock type for the SubscriptionCheckpointRepository type
type SubscriptionCheckpointRepository struct {
	mock.Mock
}

type SubscriptionCheckpointRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionCheckpointRepository) EXPECT() *SubscriptionCheckpointRepository_Expecter {
	return &SubscriptionCheckpointRepository_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: subscriptionId, ctx
func (_m *SubscriptionCheckpointRepository) Load(subscriptionId string, ctx context.Context) (uint64, error) {
	ret := _m.Called(subscriptionId, ctx)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, context.Context) (uint64, error)); ok {
		return rf(subscriptionId, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) uint64); ok {
		r0 = rf(subscriptionId, ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(subscriptionId, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionCheckpointRepository_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type SubscriptionCheckpointRepository_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - subscriptionId string
//   - ctx context.Context
func (_e *SubscriptionCheckpointRepository_Expecter) Load(subscriptionId interface{}, ctx interface{}) *SubscriptionCheckpointRepository_Load_Call {
	return &SubscriptionCheckpointRepository_Load_Call{Call: _e.mock.On("Load", subscriptionId, ctx)}
}

func (_c *SubscriptionCheckpointRepository_Load_Call) Run(run func(subscriptionId string, ctx context.Context)) *SubscriptionCheckpointRepository_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context))
	})
	return _c
}

func (_c *SubscriptionCheckpointRepository_Load_Call) Return(_a0 uint64, _a1 error) *SubscriptionCheckpointRepository_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriptionCheckpointRepository_Load_Call) RunAndReturn(run func(string, context.Context) (uint64, error)) *SubscriptionCheckpointRepository_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: subscriptionId, position, ctx
func (_m *SubscriptionCheckpointRepository) Store(subscriptionId string, position uint64, ctx context.Context) error {
	ret := _m.Called(subscriptionId, position, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64, context.Context) error); ok {
		r0 = rf(subscriptionId, position, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionCheckpointRepository_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type SubscriptionCheckpointRepository_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - subscriptionId string
//   - position uint64
//   - ctx context.Context
func (_e *SubscriptionCheckpointRepository_Expecter) Store(subscriptionId interface{}, position interface{}, ctx interface{}) *SubscriptionCheckpointRepository_Store_Call {
	return &SubscriptionCheckpointRepository_Store_Call{Call: _e.mock.On("Store", subscriptionId, position, ctx)}
}

func (_c *SubscriptionCheckpointRepository_Store_Call) Run(run func(subscriptionId string, position uint64, ctx context.Context)) *SubscriptionCheckpointRepository_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64), args[2].(context.Context))
	})
	return _c
}

func (_c *SubscriptionCheckpointRepository_Store_Call) Return(_a0 error) *SubscriptionCheckpointRepository_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubscriptionCheckpointRepository_Store_Call) RunAndReturn(run func(string, uint64, context.Context) error) *SubscriptionCheckpointRepository_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriptionCheckpointRepository creates a new instance of SubscriptionCheckpointRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionCheckpointRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionCheckpointRepository {
	mock := &SubscriptionCheckpointRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
