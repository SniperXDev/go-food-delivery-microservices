// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	consumer "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/consumer"

	metadata "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/core/metadata"

	mock "github.com/stretchr/testify/mock"

	types "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/types"
)

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

type Bus_Expecter struct {
	mock *mock.Mock
}

func (_m *Bus) EXPECT() *Bus_Expecter {
	return &Bus_Expecter{mock: &_m.Mock}
}

// AddMessageConsumedHandler provides a mock function with given fields: _a0
func (_m *Bus) IsConsumed(_a0 func(types.IMessage)) {
	_m.Called(_a0)
}

// Bus_AddMessageConsumedHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConsumed'
type Bus_AddMessageConsumedHandler_Call struct {
	*mock.Call
}

// AddMessageConsumedHandler is a helper method to define mock.On call
//   - _a0 func(types.IMessage)
func (_e *Bus_Expecter) AddMessageConsumedHandler(_a0 interface{}) *Bus_AddMessageConsumedHandler_Call {
	return &Bus_AddMessageConsumedHandler_Call{Call: _e.mock.On("IsConsumed", _a0)}
}

func (_c *Bus_AddMessageConsumedHandler_Call) Run(run func(_a0 func(types.IMessage))) *Bus_AddMessageConsumedHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(types.IMessage)))
	})
	return _c
}

func (_c *Bus_AddMessageConsumedHandler_Call) Return() *Bus_AddMessageConsumedHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bus_AddMessageConsumedHandler_Call) RunAndReturn(run func(func(types.IMessage))) *Bus_AddMessageConsumedHandler_Call {
	_c.Call.Return(run)
	return _c
}

// AddMessageProducedHandler provides a mock function with given fields: _a0
func (_m *Bus) IsProduced(_a0 func(types.IMessage)) {
	_m.Called(_a0)
}

// Bus_AddMessageProducedHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProduced'
type Bus_AddMessageProducedHandler_Call struct {
	*mock.Call
}

// AddMessageProducedHandler is a helper method to define mock.On call
//   - _a0 func(types.IMessage)
func (_e *Bus_Expecter) AddMessageProducedHandler(_a0 interface{}) *Bus_AddMessageProducedHandler_Call {
	return &Bus_AddMessageProducedHandler_Call{Call: _e.mock.On("IsProduced", _a0)}
}

func (_c *Bus_AddMessageProducedHandler_Call) Run(run func(_a0 func(types.IMessage))) *Bus_AddMessageProducedHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(types.IMessage)))
	})
	return _c
}

func (_c *Bus_AddMessageProducedHandler_Call) Return() *Bus_AddMessageProducedHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bus_AddMessageProducedHandler_Call) RunAndReturn(run func(func(types.IMessage))) *Bus_AddMessageProducedHandler_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectConsumer provides a mock function with given fields: messageType, _a1
func (_m *Bus) ConnectConsumer(messageType types.IMessage, _a1 consumer.Consumer) error {
	ret := _m.Called(messageType, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.IMessage, consumer.Consumer) error); ok {
		r0 = rf(messageType, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_ConnectConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectConsumer'
type Bus_ConnectConsumer_Call struct {
	*mock.Call
}

// ConnectConsumer is a helper method to define mock.On call
//   - messageType types.IMessage
//   - _a1 consumer.Consumer
func (_e *Bus_Expecter) ConnectConsumer(messageType interface{}, _a1 interface{}) *Bus_ConnectConsumer_Call {
	return &Bus_ConnectConsumer_Call{Call: _e.mock.On("ConnectConsumer", messageType, _a1)}
}

func (_c *Bus_ConnectConsumer_Call) Run(run func(messageType types.IMessage, _a1 consumer.Consumer)) *Bus_ConnectConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.IMessage), args[1].(consumer.Consumer))
	})
	return _c
}

func (_c *Bus_ConnectConsumer_Call) Return(_a0 error) *Bus_ConnectConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_ConnectConsumer_Call) RunAndReturn(run func(types.IMessage, consumer.Consumer) error) *Bus_ConnectConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectConsumerHandler provides a mock function with given fields: messageType, consumerHandler
func (_m *Bus) ConnectConsumerHandler(messageType types.IMessage, consumerHandler consumer.ConsumerHandler) error {
	ret := _m.Called(messageType, consumerHandler)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.IMessage, consumer.ConsumerHandler) error); ok {
		r0 = rf(messageType, consumerHandler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_ConnectConsumerHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectConsumerHandler'
type Bus_ConnectConsumerHandler_Call struct {
	*mock.Call
}

// ConnectConsumerHandler is a helper method to define mock.On call
//   - messageType types.IMessage
//   - consumerHandler consumer.ConsumerHandler
func (_e *Bus_Expecter) ConnectConsumerHandler(messageType interface{}, consumerHandler interface{}) *Bus_ConnectConsumerHandler_Call {
	return &Bus_ConnectConsumerHandler_Call{Call: _e.mock.On("ConnectConsumerHandler", messageType, consumerHandler)}
}

func (_c *Bus_ConnectConsumerHandler_Call) Run(run func(messageType types.IMessage, consumerHandler consumer.ConsumerHandler)) *Bus_ConnectConsumerHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.IMessage), args[1].(consumer.ConsumerHandler))
	})
	return _c
}

func (_c *Bus_ConnectConsumerHandler_Call) Return(_a0 error) *Bus_ConnectConsumerHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_ConnectConsumerHandler_Call) RunAndReturn(run func(types.IMessage, consumer.ConsumerHandler) error) *Bus_ConnectConsumerHandler_Call {
	_c.Call.Return(run)
	return _c
}

// PublishMessage provides a mock function with given fields: ctx, message, meta
func (_m *Bus) PublishMessage(ctx context.Context, message types.IMessage, meta metadata.Metadata) error {
	ret := _m.Called(ctx, message, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.IMessage, metadata.Metadata) error); ok {
		r0 = rf(ctx, message, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type Bus_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.IMessage
//   - meta metadata.Metadata
func (_e *Bus_Expecter) PublishMessage(ctx interface{}, message interface{}, meta interface{}) *Bus_PublishMessage_Call {
	return &Bus_PublishMessage_Call{Call: _e.mock.On("PublishMessage", ctx, message, meta)}
}

func (_c *Bus_PublishMessage_Call) Run(run func(ctx context.Context, message types.IMessage, meta metadata.Metadata)) *Bus_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.IMessage), args[2].(metadata.Metadata))
	})
	return _c
}

func (_c *Bus_PublishMessage_Call) Return(_a0 error) *Bus_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_PublishMessage_Call) RunAndReturn(run func(context.Context, types.IMessage, metadata.Metadata) error) *Bus_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// PublishMessageWithTopicName provides a mock function with given fields: ctx, message, meta, topicOrExchangeName
func (_m *Bus) PublishMessageWithTopicName(ctx context.Context, message types.IMessage, meta metadata.Metadata, topicOrExchangeName string) error {
	ret := _m.Called(ctx, message, meta, topicOrExchangeName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.IMessage, metadata.Metadata, string) error); ok {
		r0 = rf(ctx, message, meta, topicOrExchangeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_PublishMessageWithTopicName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessageWithTopicName'
type Bus_PublishMessageWithTopicName_Call struct {
	*mock.Call
}

// PublishMessageWithTopicName is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.IMessage
//   - meta metadata.Metadata
//   - topicOrExchangeName string
func (_e *Bus_Expecter) PublishMessageWithTopicName(ctx interface{}, message interface{}, meta interface{}, topicOrExchangeName interface{}) *Bus_PublishMessageWithTopicName_Call {
	return &Bus_PublishMessageWithTopicName_Call{Call: _e.mock.On("PublishMessageWithTopicName", ctx, message, meta, topicOrExchangeName)}
}

func (_c *Bus_PublishMessageWithTopicName_Call) Run(run func(ctx context.Context, message types.IMessage, meta metadata.Metadata, topicOrExchangeName string)) *Bus_PublishMessageWithTopicName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.IMessage), args[2].(metadata.Metadata), args[3].(string))
	})
	return _c
}

func (_c *Bus_PublishMessageWithTopicName_Call) Return(_a0 error) *Bus_PublishMessageWithTopicName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_PublishMessageWithTopicName_Call) RunAndReturn(run func(context.Context, types.IMessage, metadata.Metadata, string) error) *Bus_PublishMessageWithTopicName_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *Bus) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Bus_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Bus_Expecter) Start(ctx interface{}) *Bus_Start_Call {
	return &Bus_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *Bus_Start_Call) Run(run func(ctx context.Context)) *Bus_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Bus_Start_Call) Return(_a0 error) *Bus_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_Start_Call) RunAndReturn(run func(context.Context) error) *Bus_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Bus) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bus_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Bus_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Bus_Expecter) Stop() *Bus_Stop_Call {
	return &Bus_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Bus_Stop_Call) Run(run func()) *Bus_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bus_Stop_Call) Return(_a0 error) *Bus_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bus_Stop_Call) RunAndReturn(run func() error) *Bus_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewBus creates a new instance of Bus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bus {
	mock := &Bus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
