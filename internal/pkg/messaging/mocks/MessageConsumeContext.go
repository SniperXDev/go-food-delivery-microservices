// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	metadata "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/core/metadata"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/types"
)

// MessageConsumeContext is an autogenerated mock type for the MessageConsumeContext type
type MessageConsumeContext struct {
	mock.Mock
}

type MessageConsumeContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageConsumeContext) EXPECT() *MessageConsumeContext_Expecter {
	return &MessageConsumeContext_Expecter{mock: &_m.Mock}
}

// ContentType provides a mock function with given fields:
func (_m *MessageConsumeContext) ContentType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageConsumeContext_ContentType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContentType'
type MessageConsumeContext_ContentType_Call struct {
	*mock.Call
}

// ContentType is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) ContentType() *MessageConsumeContext_ContentType_Call {
	return &MessageConsumeContext_ContentType_Call{Call: _e.mock.On("ContentType")}
}

func (_c *MessageConsumeContext_ContentType_Call) Run(run func()) *MessageConsumeContext_ContentType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_ContentType_Call) Return(_a0 string) *MessageConsumeContext_ContentType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_ContentType_Call) RunAndReturn(run func() string) *MessageConsumeContext_ContentType_Call {
	_c.Call.Return(run)
	return _c
}

// CorrelationId provides a mock function with given fields:
func (_m *MessageConsumeContext) CorrelationId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageConsumeContext_CorrelationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CorrelationId'
type MessageConsumeContext_CorrelationId_Call struct {
	*mock.Call
}

// CorrelationId is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) CorrelationId() *MessageConsumeContext_CorrelationId_Call {
	return &MessageConsumeContext_CorrelationId_Call{Call: _e.mock.On("CorrelationId")}
}

func (_c *MessageConsumeContext_CorrelationId_Call) Run(run func()) *MessageConsumeContext_CorrelationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_CorrelationId_Call) Return(_a0 string) *MessageConsumeContext_CorrelationId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_CorrelationId_Call) RunAndReturn(run func() string) *MessageConsumeContext_CorrelationId_Call {
	_c.Call.Return(run)
	return _c
}

// Created provides a mock function with given fields:
func (_m *MessageConsumeContext) Created() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MessageConsumeContext_Created_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Created'
type MessageConsumeContext_Created_Call struct {
	*mock.Call
}

// Created is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) Created() *MessageConsumeContext_Created_Call {
	return &MessageConsumeContext_Created_Call{Call: _e.mock.On("Created")}
}

func (_c *MessageConsumeContext_Created_Call) Run(run func()) *MessageConsumeContext_Created_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_Created_Call) Return(_a0 time.Time) *MessageConsumeContext_Created_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_Created_Call) RunAndReturn(run func() time.Time) *MessageConsumeContext_Created_Call {
	_c.Call.Return(run)
	return _c
}

// DeliveryTag provides a mock function with given fields:
func (_m *MessageConsumeContext) DeliveryTag() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MessageConsumeContext_DeliveryTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliveryTag'
type MessageConsumeContext_DeliveryTag_Call struct {
	*mock.Call
}

// DeliveryTag is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) DeliveryTag() *MessageConsumeContext_DeliveryTag_Call {
	return &MessageConsumeContext_DeliveryTag_Call{Call: _e.mock.On("DeliveryTag")}
}

func (_c *MessageConsumeContext_DeliveryTag_Call) Run(run func()) *MessageConsumeContext_DeliveryTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_DeliveryTag_Call) Return(_a0 uint64) *MessageConsumeContext_DeliveryTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_DeliveryTag_Call) RunAndReturn(run func() uint64) *MessageConsumeContext_DeliveryTag_Call {
	_c.Call.Return(run)
	return _c
}

// Message provides a mock function with given fields:
func (_m *MessageConsumeContext) Message() types.IMessage {
	ret := _m.Called()

	var r0 types.IMessage
	if rf, ok := ret.Get(0).(func() types.IMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IMessage)
		}
	}

	return r0
}

// MessageConsumeContext_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type MessageConsumeContext_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) Message() *MessageConsumeContext_Message_Call {
	return &MessageConsumeContext_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *MessageConsumeContext_Message_Call) Run(run func()) *MessageConsumeContext_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_Message_Call) Return(_a0 types.IMessage) *MessageConsumeContext_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_Message_Call) RunAndReturn(run func() types.IMessage) *MessageConsumeContext_Message_Call {
	_c.Call.Return(run)
	return _c
}

// MessageId provides a mock function with given fields:
func (_m *MessageConsumeContext) MessageId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageConsumeContext_MessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageId'
type MessageConsumeContext_MessageId_Call struct {
	*mock.Call
}

// MessageId is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) MessageId() *MessageConsumeContext_MessageId_Call {
	return &MessageConsumeContext_MessageId_Call{Call: _e.mock.On("MessageId")}
}

func (_c *MessageConsumeContext_MessageId_Call) Run(run func()) *MessageConsumeContext_MessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_MessageId_Call) Return(_a0 string) *MessageConsumeContext_MessageId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_MessageId_Call) RunAndReturn(run func() string) *MessageConsumeContext_MessageId_Call {
	_c.Call.Return(run)
	return _c
}

// MessageType provides a mock function with given fields:
func (_m *MessageConsumeContext) MessageType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageConsumeContext_MessageType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageType'
type MessageConsumeContext_MessageType_Call struct {
	*mock.Call
}

// MessageType is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) MessageType() *MessageConsumeContext_MessageType_Call {
	return &MessageConsumeContext_MessageType_Call{Call: _e.mock.On("MessageType")}
}

func (_c *MessageConsumeContext_MessageType_Call) Run(run func()) *MessageConsumeContext_MessageType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_MessageType_Call) Return(_a0 string) *MessageConsumeContext_MessageType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_MessageType_Call) RunAndReturn(run func() string) *MessageConsumeContext_MessageType_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with given fields:
func (_m *MessageConsumeContext) Metadata() metadata.Metadata {
	ret := _m.Called()

	var r0 metadata.Metadata
	if rf, ok := ret.Get(0).(func() metadata.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.Metadata)
		}
	}

	return r0
}

// MessageConsumeContext_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MessageConsumeContext_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MessageConsumeContext_Expecter) Metadata() *MessageConsumeContext_Metadata_Call {
	return &MessageConsumeContext_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MessageConsumeContext_Metadata_Call) Run(run func()) *MessageConsumeContext_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageConsumeContext_Metadata_Call) Return(_a0 metadata.Metadata) *MessageConsumeContext_Metadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageConsumeContext_Metadata_Call) RunAndReturn(run func() metadata.Metadata) *MessageConsumeContext_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageConsumeContext creates a new instance of MessageConsumeContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageConsumeContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageConsumeContext {
	mock := &MessageConsumeContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
