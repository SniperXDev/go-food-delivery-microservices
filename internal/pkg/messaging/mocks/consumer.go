// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	consumer "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/consumer"

	mock "github.com/stretchr/testify/mock"

	types "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/types"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// AddMessageConsumedHandler provides a mock function with given fields: _a0
func (_m *Consumer) AddMessageConsumedHandler(_a0 func(types.IMessage)) {
	_m.Called(_a0)
}

// ConnectHandler provides a mock function with given fields: handler
func (_m *Consumer) ConnectHandler(handler consumer.ConsumerHandler) {
	_m.Called(handler)
}

// Start provides a mock function with given fields: ctx
func (_m *Consumer) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *Consumer) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumer(t mockConstructorTestingTNewConsumer) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
