// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	pipeline "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/pipeline"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerPipelineConfigurationBuilder is an autogenerated mock type for the ConsumerPipelineConfigurationBuilder type
type ConsumerPipelineConfigurationBuilder struct {
	mock.Mock
}

type ConsumerPipelineConfigurationBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerPipelineConfigurationBuilder) EXPECT() *ConsumerPipelineConfigurationBuilder_Expecter {
	return &ConsumerPipelineConfigurationBuilder_Expecter{mock: &_m.Mock}
}

// AddPipeline provides a mock function with given fields: _a0
func (_m *ConsumerPipelineConfigurationBuilder) AddPipeline(_a0 pipeline.ConsumerPipeline) pipeline.ConsumerPipelineConfigurationBuilder {
	ret := _m.Called(_a0)

	var r0 pipeline.ConsumerPipelineConfigurationBuilder
	if rf, ok := ret.Get(0).(func(pipeline.ConsumerPipeline) pipeline.ConsumerPipelineConfigurationBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipeline.ConsumerPipelineConfigurationBuilder)
		}
	}

	return r0
}

// ConsumerPipelineConfigurationBuilder_AddPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPipeline'
type ConsumerPipelineConfigurationBuilder_AddPipeline_Call struct {
	*mock.Call
}

// AddPipeline is a helper method to define mock.On call
//   - _a0 pipeline.ConsumerPipeline
func (_e *ConsumerPipelineConfigurationBuilder_Expecter) AddPipeline(_a0 interface{}) *ConsumerPipelineConfigurationBuilder_AddPipeline_Call {
	return &ConsumerPipelineConfigurationBuilder_AddPipeline_Call{Call: _e.mock.On("AddPipeline", _a0)}
}

func (_c *ConsumerPipelineConfigurationBuilder_AddPipeline_Call) Run(run func(_a0 pipeline.ConsumerPipeline)) *ConsumerPipelineConfigurationBuilder_AddPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pipeline.ConsumerPipeline))
	})
	return _c
}

func (_c *ConsumerPipelineConfigurationBuilder_AddPipeline_Call) Return(_a0 pipeline.ConsumerPipelineConfigurationBuilder) *ConsumerPipelineConfigurationBuilder_AddPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerPipelineConfigurationBuilder_AddPipeline_Call) RunAndReturn(run func(pipeline.ConsumerPipeline) pipeline.ConsumerPipelineConfigurationBuilder) *ConsumerPipelineConfigurationBuilder_AddPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with given fields:
func (_m *ConsumerPipelineConfigurationBuilder) Build() *pipeline.ConsumerPipelineConfiguration {
	ret := _m.Called()

	var r0 *pipeline.ConsumerPipelineConfiguration
	if rf, ok := ret.Get(0).(func() *pipeline.ConsumerPipelineConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipeline.ConsumerPipelineConfiguration)
		}
	}

	return r0
}

// ConsumerPipelineConfigurationBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type ConsumerPipelineConfigurationBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *ConsumerPipelineConfigurationBuilder_Expecter) Build() *ConsumerPipelineConfigurationBuilder_Build_Call {
	return &ConsumerPipelineConfigurationBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *ConsumerPipelineConfigurationBuilder_Build_Call) Run(run func()) *ConsumerPipelineConfigurationBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerPipelineConfigurationBuilder_Build_Call) Return(_a0 *pipeline.ConsumerPipelineConfiguration) *ConsumerPipelineConfigurationBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerPipelineConfigurationBuilder_Build_Call) RunAndReturn(run func() *pipeline.ConsumerPipelineConfiguration) *ConsumerPipelineConfigurationBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsumerPipelineConfigurationBuilder creates a new instance of ConsumerPipelineConfigurationBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerPipelineConfigurationBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerPipelineConfigurationBuilder {
	mock := &ConsumerPipelineConfigurationBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
