// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	consumer "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/consumer"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerHandlerConfigurationBuilder is an autogenerated mock type for the ConsumerHandlerConfigurationBuilder type
type ConsumerHandlerConfigurationBuilder struct {
	mock.Mock
}

type ConsumerHandlerConfigurationBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerHandlerConfigurationBuilder) EXPECT() *ConsumerHandlerConfigurationBuilder_Expecter {
	return &ConsumerHandlerConfigurationBuilder_Expecter{mock: &_m.Mock}
}

// AddHandler provides a mock function with given fields: handler
func (_m *ConsumerHandlerConfigurationBuilder) AddHandler(handler consumer.ConsumerHandler) consumer.ConsumerHandlerConfigurationBuilder {
	ret := _m.Called(handler)

	var r0 consumer.ConsumerHandlerConfigurationBuilder
	if rf, ok := ret.Get(0).(func(consumer.ConsumerHandler) consumer.ConsumerHandlerConfigurationBuilder); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consumer.ConsumerHandlerConfigurationBuilder)
		}
	}

	return r0
}

// ConsumerHandlerConfigurationBuilder_AddHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHandler'
type ConsumerHandlerConfigurationBuilder_AddHandler_Call struct {
	*mock.Call
}

// AddHandler is a helper method to define mock.On call
//   - handler consumer.ConsumerHandler
func (_e *ConsumerHandlerConfigurationBuilder_Expecter) AddHandler(handler interface{}) *ConsumerHandlerConfigurationBuilder_AddHandler_Call {
	return &ConsumerHandlerConfigurationBuilder_AddHandler_Call{Call: _e.mock.On("AddHandler", handler)}
}

func (_c *ConsumerHandlerConfigurationBuilder_AddHandler_Call) Run(run func(handler consumer.ConsumerHandler)) *ConsumerHandlerConfigurationBuilder_AddHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(consumer.ConsumerHandler))
	})
	return _c
}

func (_c *ConsumerHandlerConfigurationBuilder_AddHandler_Call) Return(_a0 consumer.ConsumerHandlerConfigurationBuilder) *ConsumerHandlerConfigurationBuilder_AddHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerHandlerConfigurationBuilder_AddHandler_Call) RunAndReturn(run func(consumer.ConsumerHandler) consumer.ConsumerHandlerConfigurationBuilder) *ConsumerHandlerConfigurationBuilder_AddHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with given fields:
func (_m *ConsumerHandlerConfigurationBuilder) Build() *consumer.ConsumerHandlersConfiguration {
	ret := _m.Called()

	var r0 *consumer.ConsumerHandlersConfiguration
	if rf, ok := ret.Get(0).(func() *consumer.ConsumerHandlersConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*consumer.ConsumerHandlersConfiguration)
		}
	}

	return r0
}

// ConsumerHandlerConfigurationBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type ConsumerHandlerConfigurationBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *ConsumerHandlerConfigurationBuilder_Expecter) Build() *ConsumerHandlerConfigurationBuilder_Build_Call {
	return &ConsumerHandlerConfigurationBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *ConsumerHandlerConfigurationBuilder_Build_Call) Run(run func()) *ConsumerHandlerConfigurationBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerHandlerConfigurationBuilder_Build_Call) Return(_a0 *consumer.ConsumerHandlersConfiguration) *ConsumerHandlerConfigurationBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerHandlerConfigurationBuilder_Build_Call) RunAndReturn(run func() *consumer.ConsumerHandlersConfiguration) *ConsumerHandlerConfigurationBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsumerHandlerConfigurationBuilder creates a new instance of ConsumerHandlerConfigurationBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerHandlerConfigurationBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerHandlerConfigurationBuilder {
	mock := &ConsumerHandlerConfigurationBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
