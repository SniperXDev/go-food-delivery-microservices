// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// IMessage is an autogenerated mock type for the IMessage type
type IMessage struct {
	mock.Mock
}

// GeMessageId provides a mock function with given fields:
func (_m *IMessage) GeMessageId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCreated provides a mock function with given fields:
func (_m *IMessage) GetCreated() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetEventTypeName provides a mock function with given fields:
func (_m *IMessage) GetEventTypeName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsMessage provides a mock function with given fields:
func (_m *IMessage) IsMessage() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetEventTypeName provides a mock function with given fields: _a0
func (_m *IMessage) SetEventTypeName(_a0 string) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewIMessage interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMessage creates a new instance of IMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMessage(t mockConstructorTestingTNewIMessage) *IMessage {
	mock := &IMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
