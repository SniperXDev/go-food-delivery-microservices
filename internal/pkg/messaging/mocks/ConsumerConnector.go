// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	consumer "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/consumer"
	mock "github.com/stretchr/testify/mock"

	types "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/types"
)

// ConsumerConnector is an autogenerated mock type for the ConsumerConnector type
type ConsumerConnector struct {
	mock.Mock
}

type ConsumerConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerConnector) EXPECT() *ConsumerConnector_Expecter {
	return &ConsumerConnector_Expecter{mock: &_m.Mock}
}

// ConnectConsumer provides a mock function with given fields: messageType, _a1
func (_m *ConsumerConnector) ConnectConsumer(messageType types.IMessage, _a1 consumer.Consumer) error {
	ret := _m.Called(messageType, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.IMessage, consumer.Consumer) error); ok {
		r0 = rf(messageType, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumerConnector_ConnectConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectConsumer'
type ConsumerConnector_ConnectConsumer_Call struct {
	*mock.Call
}

// ConnectConsumer is a helper method to define mock.On call
//   - messageType types.IMessage
//   - _a1 consumer.Consumer
func (_e *ConsumerConnector_Expecter) ConnectConsumer(messageType interface{}, _a1 interface{}) *ConsumerConnector_ConnectConsumer_Call {
	return &ConsumerConnector_ConnectConsumer_Call{Call: _e.mock.On("ConnectConsumer", messageType, _a1)}
}

func (_c *ConsumerConnector_ConnectConsumer_Call) Run(run func(messageType types.IMessage, _a1 consumer.Consumer)) *ConsumerConnector_ConnectConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.IMessage), args[1].(consumer.Consumer))
	})
	return _c
}

func (_c *ConsumerConnector_ConnectConsumer_Call) Return(_a0 error) *ConsumerConnector_ConnectConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerConnector_ConnectConsumer_Call) RunAndReturn(run func(types.IMessage, consumer.Consumer) error) *ConsumerConnector_ConnectConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectConsumerHandler provides a mock function with given fields: messageType, consumerHandler
func (_m *ConsumerConnector) ConnectConsumerHandler(messageType types.IMessage, consumerHandler consumer.ConsumerHandler) error {
	ret := _m.Called(messageType, consumerHandler)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.IMessage, consumer.ConsumerHandler) error); ok {
		r0 = rf(messageType, consumerHandler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumerConnector_ConnectConsumerHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectConsumerHandler'
type ConsumerConnector_ConnectConsumerHandler_Call struct {
	*mock.Call
}

// ConnectConsumerHandler is a helper method to define mock.On call
//   - messageType types.IMessage
//   - consumerHandler consumer.ConsumerHandler
func (_e *ConsumerConnector_Expecter) ConnectConsumerHandler(messageType interface{}, consumerHandler interface{}) *ConsumerConnector_ConnectConsumerHandler_Call {
	return &ConsumerConnector_ConnectConsumerHandler_Call{Call: _e.mock.On("ConnectConsumerHandler", messageType, consumerHandler)}
}

func (_c *ConsumerConnector_ConnectConsumerHandler_Call) Run(run func(messageType types.IMessage, consumerHandler consumer.ConsumerHandler)) *ConsumerConnector_ConnectConsumerHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.IMessage), args[1].(consumer.ConsumerHandler))
	})
	return _c
}

func (_c *ConsumerConnector_ConnectConsumerHandler_Call) Return(_a0 error) *ConsumerConnector_ConnectConsumerHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerConnector_ConnectConsumerHandler_Call) RunAndReturn(run func(types.IMessage, consumer.ConsumerHandler) error) *ConsumerConnector_ConnectConsumerHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsumerConnector creates a new instance of ConsumerConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerConnector {
	mock := &ConsumerConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
