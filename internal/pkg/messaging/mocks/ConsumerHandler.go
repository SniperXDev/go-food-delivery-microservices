// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/mehdihadeli/go-ecommerce-microservices/internal/pkg/messaging/types"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerHandler is an autogenerated mock type for the ConsumerHandler type
type ConsumerHandler struct {
	mock.Mock
}

type ConsumerHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerHandler) EXPECT() *ConsumerHandler_Expecter {
	return &ConsumerHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, consumeContext
func (_m *ConsumerHandler) Handle(ctx context.Context, consumeContext types.MessageConsumeContext) error {
	ret := _m.Called(ctx, consumeContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MessageConsumeContext) error); ok {
		r0 = rf(ctx, consumeContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumerHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type ConsumerHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - consumeContext types.MessageConsumeContext
func (_e *ConsumerHandler_Expecter) Handle(ctx interface{}, consumeContext interface{}) *ConsumerHandler_Handle_Call {
	return &ConsumerHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, consumeContext)}
}

func (_c *ConsumerHandler_Handle_Call) Run(run func(ctx context.Context, consumeContext types.MessageConsumeContext)) *ConsumerHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.MessageConsumeContext))
	})
	return _c
}

func (_c *ConsumerHandler_Handle_Call) Return(_a0 error) *ConsumerHandler_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerHandler_Handle_Call) RunAndReturn(run func(context.Context, types.MessageConsumeContext) error) *ConsumerHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsumerHandler creates a new instance of ConsumerHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerHandler {
	mock := &ConsumerHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
