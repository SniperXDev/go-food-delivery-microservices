// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ProducerBuilderFuc is an autogenerated mock type for the ProducerBuilderFuc type
type ProducerBuilderFuc[T interface{}] struct {
	mock.Mock
}

type ProducerBuilderFuc_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *ProducerBuilderFuc[T]) EXPECT() *ProducerBuilderFuc_Expecter[T] {
	return &ProducerBuilderFuc_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: builder
func (_m *ProducerBuilderFuc[T]) Execute(builder T) {
	_m.Called(builder)
}

// ProducerBuilderFuc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ProducerBuilderFuc_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - builder T
func (_e *ProducerBuilderFuc_Expecter[T]) Execute(builder interface{}) *ProducerBuilderFuc_Execute_Call[T] {
	return &ProducerBuilderFuc_Execute_Call[T]{Call: _e.mock.On("Execute", builder)}
}

func (_c *ProducerBuilderFuc_Execute_Call[T]) Run(run func(builder T)) *ProducerBuilderFuc_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *ProducerBuilderFuc_Execute_Call[T]) Return() *ProducerBuilderFuc_Execute_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *ProducerBuilderFuc_Execute_Call[T]) RunAndReturn(run func(T)) *ProducerBuilderFuc_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewProducerBuilderFuc creates a new instance of ProducerBuilderFuc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducerBuilderFuc[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ProducerBuilderFuc[T] {
	mock := &ProducerBuilderFuc[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
