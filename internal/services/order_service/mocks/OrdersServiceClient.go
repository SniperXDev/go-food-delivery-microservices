// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	"github.com/mehdihadeli/go-ecommerce-microservices/internal/services/orderservice/internal/shared/grpc/genproto"
)

// OrdersServiceClient is an autogenerated mock type for the OrdersServiceClient type
type OrdersServiceClient struct {
	mock.Mock
}

type OrdersServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *OrdersServiceClient) EXPECT() *OrdersServiceClient_Expecter {
	return &OrdersServiceClient_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersServiceClient) CreateOrder(ctx context.Context, in *orders_service.CreateOrderReq, opts ...grpc.CallOption) (*orders_service.CreateOrderRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orders_service.CreateOrderRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.CreateOrderReq, ...grpc.CallOption) (*orders_service.CreateOrderRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.CreateOrderReq, ...grpc.CallOption) *orders_service.CreateOrderRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders_service.CreateOrderRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orders_service.CreateOrderReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersServiceClient_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrdersServiceClient_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *orders_service.CreateOrderReq
//   - opts ...grpc.CallOption
func (_e *OrdersServiceClient_Expecter) CreateOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrdersServiceClient_CreateOrder_Call {
	return &OrdersServiceClient_CreateOrder_Call{Call: _e.mock.On("CreateOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersServiceClient_CreateOrder_Call) Run(run func(ctx context.Context, in *orders_service.CreateOrderReq, opts ...grpc.CallOption)) *OrdersServiceClient_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*orders_service.CreateOrderReq), variadicArgs...)
	})
	return _c
}

func (_c *OrdersServiceClient_CreateOrder_Call) Return(_a0 *orders_service.CreateOrderRes, _a1 error) *OrdersServiceClient_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersServiceClient_CreateOrder_Call) RunAndReturn(run func(context.Context, *orders_service.CreateOrderReq, ...grpc.CallOption) (*orders_service.CreateOrderRes, error)) *OrdersServiceClient_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByID provides a mock function with given fields: ctx, in, opts
func (_m *OrdersServiceClient) GetOrderByID(ctx context.Context, in *orders_service.GetOrderByIDReq, opts ...grpc.CallOption) (*orders_service.GetOrderByIDRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orders_service.GetOrderByIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.GetOrderByIDReq, ...grpc.CallOption) (*orders_service.GetOrderByIDRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.GetOrderByIDReq, ...grpc.CallOption) *orders_service.GetOrderByIDRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders_service.GetOrderByIDRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orders_service.GetOrderByIDReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersServiceClient_GetOrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByID'
type OrdersServiceClient_GetOrderByID_Call struct {
	*mock.Call
}

// GetOrderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *orders_service.GetOrderByIDReq
//   - opts ...grpc.CallOption
func (_e *OrdersServiceClient_Expecter) GetOrderByID(ctx interface{}, in interface{}, opts ...interface{}) *OrdersServiceClient_GetOrderByID_Call {
	return &OrdersServiceClient_GetOrderByID_Call{Call: _e.mock.On("GetOrderByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersServiceClient_GetOrderByID_Call) Run(run func(ctx context.Context, in *orders_service.GetOrderByIDReq, opts ...grpc.CallOption)) *OrdersServiceClient_GetOrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*orders_service.GetOrderByIDReq), variadicArgs...)
	})
	return _c
}

func (_c *OrdersServiceClient_GetOrderByID_Call) Return(_a0 *orders_service.GetOrderByIDRes, _a1 error) *OrdersServiceClient_GetOrderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersServiceClient_GetOrderByID_Call) RunAndReturn(run func(context.Context, *orders_service.GetOrderByIDReq, ...grpc.CallOption) (*orders_service.GetOrderByIDRes, error)) *OrdersServiceClient_GetOrderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, in, opts
func (_m *OrdersServiceClient) GetOrders(ctx context.Context, in *orders_service.GetOrdersReq, opts ...grpc.CallOption) (*orders_service.GetOrdersRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orders_service.GetOrdersRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.GetOrdersReq, ...grpc.CallOption) (*orders_service.GetOrdersRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.GetOrdersReq, ...grpc.CallOption) *orders_service.GetOrdersRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders_service.GetOrdersRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orders_service.GetOrdersReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersServiceClient_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type OrdersServiceClient_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - in *orders_service.GetOrdersReq
//   - opts ...grpc.CallOption
func (_e *OrdersServiceClient_Expecter) GetOrders(ctx interface{}, in interface{}, opts ...interface{}) *OrdersServiceClient_GetOrders_Call {
	return &OrdersServiceClient_GetOrders_Call{Call: _e.mock.On("GetOrders",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersServiceClient_GetOrders_Call) Run(run func(ctx context.Context, in *orders_service.GetOrdersReq, opts ...grpc.CallOption)) *OrdersServiceClient_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*orders_service.GetOrdersReq), variadicArgs...)
	})
	return _c
}

func (_c *OrdersServiceClient_GetOrders_Call) Return(_a0 *orders_service.GetOrdersRes, _a1 error) *OrdersServiceClient_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersServiceClient_GetOrders_Call) RunAndReturn(run func(context.Context, *orders_service.GetOrdersReq, ...grpc.CallOption) (*orders_service.GetOrdersRes, error)) *OrdersServiceClient_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersServiceClient) SubmitOrder(ctx context.Context, in *orders_service.SubmitOrderReq, opts ...grpc.CallOption) (*orders_service.SubmitOrderRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orders_service.SubmitOrderRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.SubmitOrderReq, ...grpc.CallOption) (*orders_service.SubmitOrderRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.SubmitOrderReq, ...grpc.CallOption) *orders_service.SubmitOrderRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders_service.SubmitOrderRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orders_service.SubmitOrderReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersServiceClient_SubmitOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitOrder'
type OrdersServiceClient_SubmitOrder_Call struct {
	*mock.Call
}

// SubmitOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *orders_service.SubmitOrderReq
//   - opts ...grpc.CallOption
func (_e *OrdersServiceClient_Expecter) SubmitOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrdersServiceClient_SubmitOrder_Call {
	return &OrdersServiceClient_SubmitOrder_Call{Call: _e.mock.On("SubmitOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersServiceClient_SubmitOrder_Call) Run(run func(ctx context.Context, in *orders_service.SubmitOrderReq, opts ...grpc.CallOption)) *OrdersServiceClient_SubmitOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*orders_service.SubmitOrderReq), variadicArgs...)
	})
	return _c
}

func (_c *OrdersServiceClient_SubmitOrder_Call) Return(_a0 *orders_service.SubmitOrderRes, _a1 error) *OrdersServiceClient_SubmitOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersServiceClient_SubmitOrder_Call) RunAndReturn(run func(context.Context, *orders_service.SubmitOrderReq, ...grpc.CallOption) (*orders_service.SubmitOrderRes, error)) *OrdersServiceClient_SubmitOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShoppingCart provides a mock function with given fields: ctx, in, opts
func (_m *OrdersServiceClient) UpdateShoppingCart(ctx context.Context, in *orders_service.UpdateShoppingCartReq, opts ...grpc.CallOption) (*orders_service.UpdateShoppingCartRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orders_service.UpdateShoppingCartRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.UpdateShoppingCartReq, ...grpc.CallOption) (*orders_service.UpdateShoppingCartRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orders_service.UpdateShoppingCartReq, ...grpc.CallOption) *orders_service.UpdateShoppingCartRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders_service.UpdateShoppingCartRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orders_service.UpdateShoppingCartReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersServiceClient_UpdateShoppingCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShoppingCart'
type OrdersServiceClient_UpdateShoppingCart_Call struct {
	*mock.Call
}

// UpdateShoppingCart is a helper method to define mock.On call
//   - ctx context.Context
//   - in *orders_service.UpdateShoppingCartReq
//   - opts ...grpc.CallOption
func (_e *OrdersServiceClient_Expecter) UpdateShoppingCart(ctx interface{}, in interface{}, opts ...interface{}) *OrdersServiceClient_UpdateShoppingCart_Call {
	return &OrdersServiceClient_UpdateShoppingCart_Call{Call: _e.mock.On("UpdateShoppingCart",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrdersServiceClient_UpdateShoppingCart_Call) Run(run func(ctx context.Context, in *orders_service.UpdateShoppingCartReq, opts ...grpc.CallOption)) *OrdersServiceClient_UpdateShoppingCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*orders_service.UpdateShoppingCartReq), variadicArgs...)
	})
	return _c
}

func (_c *OrdersServiceClient_UpdateShoppingCart_Call) Return(_a0 *orders_service.UpdateShoppingCartRes, _a1 error) *OrdersServiceClient_UpdateShoppingCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersServiceClient_UpdateShoppingCart_Call) RunAndReturn(run func(context.Context, *orders_service.UpdateShoppingCartReq, ...grpc.CallOption) (*orders_service.UpdateShoppingCartRes, error)) *OrdersServiceClient_UpdateShoppingCart_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrdersServiceClient creates a new instance of OrdersServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersServiceClient {
	mock := &OrdersServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
