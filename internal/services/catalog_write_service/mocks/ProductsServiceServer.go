// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	productsservice "github.com/mehdihadeli/go-ecommerce-microservices/internal/services/catalogwriteservice/internal/shared/grpc/genproto"
)

// ProductsServiceServer is an autogenerated mock type for the ProductsServiceServer type
type ProductsServiceServer struct {
	mock.Mock
}

type ProductsServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductsServiceServer) EXPECT() *ProductsServiceServer_Expecter {
	return &ProductsServiceServer_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) CreateProduct(_a0 context.Context, _a1 *productsservice.CreateProductReq) (*productsservice.CreateProductRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *productsservice.CreateProductRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *productsservice.CreateProductReq) (*productsservice.CreateProductRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *productsservice.CreateProductReq) *productsservice.CreateProductRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productsservice.CreateProductRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *productsservice.CreateProductReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsServiceServer_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductsServiceServer_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *products_service.CreateProductReq
func (_e *ProductsServiceServer_Expecter) CreateProduct(_a0 interface{}, _a1 interface{}) *ProductsServiceServer_CreateProduct_Call {
	return &ProductsServiceServer_CreateProduct_Call{Call: _e.mock.On("CreateProduct", _a0, _a1)}
}

func (_c *ProductsServiceServer_CreateProduct_Call) Run(run func(_a0 context.Context, _a1 *productsservice.CreateProductReq)) *ProductsServiceServer_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*productsservice.CreateProductReq))
	})
	return _c
}

func (_c *ProductsServiceServer_CreateProduct_Call) Return(_a0 *productsservice.CreateProductRes, _a1 error) *ProductsServiceServer_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductsServiceServer_CreateProduct_Call) RunAndReturn(run func(context.Context, *productsservice.CreateProductReq) (*productsservice.CreateProductRes, error)) *ProductsServiceServer_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductById provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) GetProductById(_a0 context.Context, _a1 *productsservice.GetProductByIdReq) (*productsservice.GetProductByIdRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *productsservice.GetProductByIdRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *productsservice.GetProductByIdReq) (*productsservice.GetProductByIdRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *productsservice.GetProductByIdReq) *productsservice.GetProductByIdRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productsservice.GetProductByIdRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *productsservice.GetProductByIdReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsServiceServer_GetProductById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductById'
type ProductsServiceServer_GetProductById_Call struct {
	*mock.Call
}

// GetProductById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *products_service.GetProductByIdReq
func (_e *ProductsServiceServer_Expecter) GetProductById(_a0 interface{}, _a1 interface{}) *ProductsServiceServer_GetProductById_Call {
	return &ProductsServiceServer_GetProductById_Call{Call: _e.mock.On("GetProductById", _a0, _a1)}
}

func (_c *ProductsServiceServer_GetProductById_Call) Run(run func(_a0 context.Context, _a1 *productsservice.GetProductByIdReq)) *ProductsServiceServer_GetProductById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*productsservice.GetProductByIdReq))
	})
	return _c
}

func (_c *ProductsServiceServer_GetProductById_Call) Return(_a0 *productsservice.GetProductByIdRes, _a1 error) *ProductsServiceServer_GetProductById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductsServiceServer_GetProductById_Call) RunAndReturn(run func(context.Context, *productsservice.GetProductByIdReq) (*productsservice.GetProductByIdRes, error)) *ProductsServiceServer_GetProductById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) UpdateProduct(_a0 context.Context, _a1 *productsservice.UpdateProductReq) (*productsservice.UpdateProductRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *productsservice.UpdateProductRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *productsservice.UpdateProductReq) (*productsservice.UpdateProductRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *productsservice.UpdateProductReq) *productsservice.UpdateProductRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productsservice.UpdateProductRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *productsservice.UpdateProductReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsServiceServer_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type ProductsServiceServer_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *products_service.UpdateProductReq
func (_e *ProductsServiceServer_Expecter) UpdateProduct(_a0 interface{}, _a1 interface{}) *ProductsServiceServer_UpdateProduct_Call {
	return &ProductsServiceServer_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", _a0, _a1)}
}

func (_c *ProductsServiceServer_UpdateProduct_Call) Run(run func(_a0 context.Context, _a1 *productsservice.UpdateProductReq)) *ProductsServiceServer_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*productsservice.UpdateProductReq))
	})
	return _c
}

func (_c *ProductsServiceServer_UpdateProduct_Call) Return(_a0 *productsservice.UpdateProductRes, _a1 error) *ProductsServiceServer_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductsServiceServer_UpdateProduct_Call) RunAndReturn(run func(context.Context, *productsservice.UpdateProductReq) (*productsservice.UpdateProductRes, error)) *ProductsServiceServer_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductsServiceServer creates a new instance of ProductsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductsServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductsServiceServer {
	mock := &ProductsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
