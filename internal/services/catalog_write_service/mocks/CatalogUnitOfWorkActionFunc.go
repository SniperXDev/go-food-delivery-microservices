// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	data "github.com/mehdihadeli/go-ecommerce-microservices/internal/services/catalogwriteservice/internal/products/contracts/data"
	mock "github.com/stretchr/testify/mock"
)

// CatalogUnitOfWorkActionFunc is an autogenerated mock type for the CatalogUnitOfWorkActionFunc type
type CatalogUnitOfWorkActionFunc struct {
	mock.Mock
}

type CatalogUnitOfWorkActionFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogUnitOfWorkActionFunc) EXPECT() *CatalogUnitOfWorkActionFunc_Expecter {
	return &CatalogUnitOfWorkActionFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: catalogContext
func (_m *CatalogUnitOfWorkActionFunc) Execute(catalogContext data.CatalogContext) error {
	ret := _m.Called(catalogContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.CatalogContext) error); ok {
		r0 = rf(catalogContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CatalogUnitOfWorkActionFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CatalogUnitOfWorkActionFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - catalogContext data.CatalogContext
func (_e *CatalogUnitOfWorkActionFunc_Expecter) Execute(catalogContext interface{}) *CatalogUnitOfWorkActionFunc_Execute_Call {
	return &CatalogUnitOfWorkActionFunc_Execute_Call{Call: _e.mock.On("Execute", catalogContext)}
}

func (_c *CatalogUnitOfWorkActionFunc_Execute_Call) Run(run func(catalogContext data.CatalogContext)) *CatalogUnitOfWorkActionFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.CatalogContext))
	})
	return _c
}

func (_c *CatalogUnitOfWorkActionFunc_Execute_Call) Return(_a0 error) *CatalogUnitOfWorkActionFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogUnitOfWorkActionFunc_Execute_Call) RunAndReturn(run func(data.CatalogContext) error) *CatalogUnitOfWorkActionFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogUnitOfWorkActionFunc creates a new instance of CatalogUnitOfWorkActionFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogUnitOfWorkActionFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogUnitOfWorkActionFunc {
	mock := &CatalogUnitOfWorkActionFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
