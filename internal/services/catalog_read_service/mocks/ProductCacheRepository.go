// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/mehdihadeli/go-ecommerce-microservices/internal/services/catalogreadservice/internal/products/models"
)

// ProductCacheRepository is an autogenerated mock type for the ProductCacheRepository type
type ProductCacheRepository struct {
	mock.Mock
}

type ProductCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductCacheRepository) EXPECT() *ProductCacheRepository_Expecter {
	return &ProductCacheRepository_Expecter{mock: &_m.Mock}
}

// DeleteAllProducts provides a mock function with given fields: ctx
func (_m *ProductCacheRepository) DeleteAllProducts(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductCacheRepository_DeleteAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllProducts'
type ProductCacheRepository_DeleteAllProducts_Call struct {
	*mock.Call
}

// DeleteAllProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProductCacheRepository_Expecter) DeleteAllProducts(ctx interface{}) *ProductCacheRepository_DeleteAllProducts_Call {
	return &ProductCacheRepository_DeleteAllProducts_Call{Call: _e.mock.On("DeleteAllProducts", ctx)}
}

func (_c *ProductCacheRepository_DeleteAllProducts_Call) Run(run func(ctx context.Context)) *ProductCacheRepository_DeleteAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProductCacheRepository_DeleteAllProducts_Call) Return(_a0 error) *ProductCacheRepository_DeleteAllProducts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductCacheRepository_DeleteAllProducts_Call) RunAndReturn(run func(context.Context) error) *ProductCacheRepository_DeleteAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: ctx, key
func (_m *ProductCacheRepository) DeleteProduct(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductCacheRepository_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type ProductCacheRepository_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *ProductCacheRepository_Expecter) DeleteProduct(ctx interface{}, key interface{}) *ProductCacheRepository_DeleteProduct_Call {
	return &ProductCacheRepository_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, key)}
}

func (_c *ProductCacheRepository_DeleteProduct_Call) Run(run func(ctx context.Context, key string)) *ProductCacheRepository_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductCacheRepository_DeleteProduct_Call) Return(_a0 error) *ProductCacheRepository_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductCacheRepository_DeleteProduct_Call) RunAndReturn(run func(context.Context, string) error) *ProductCacheRepository_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductById provides a mock function with given fields: ctx, key
func (_m *ProductCacheRepository) GetProductById(ctx context.Context, key string) (*models.Product, error) {
	ret := _m.Called(ctx, key)

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Product, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Product); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductCacheRepository_GetProductById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductById'
type ProductCacheRepository_GetProductById_Call struct {
	*mock.Call
}

// GetProductById is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *ProductCacheRepository_Expecter) GetProductById(ctx interface{}, key interface{}) *ProductCacheRepository_GetProductById_Call {
	return &ProductCacheRepository_GetProductById_Call{Call: _e.mock.On("GetProductById", ctx, key)}
}

func (_c *ProductCacheRepository_GetProductById_Call) Run(run func(ctx context.Context, key string)) *ProductCacheRepository_GetProductById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductCacheRepository_GetProductById_Call) Return(_a0 *models.Product, _a1 error) *ProductCacheRepository_GetProductById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductCacheRepository_GetProductById_Call) RunAndReturn(run func(context.Context, string) (*models.Product, error)) *ProductCacheRepository_GetProductById_Call {
	_c.Call.Return(run)
	return _c
}

// PutProduct provides a mock function with given fields: ctx, key, product
func (_m *ProductCacheRepository) PutProduct(ctx context.Context, key string, product *models.Product) error {
	ret := _m.Called(ctx, key, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Product) error); ok {
		r0 = rf(ctx, key, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductCacheRepository_PutProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProduct'
type ProductCacheRepository_PutProduct_Call struct {
	*mock.Call
}

// PutProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - product *models.Product
func (_e *ProductCacheRepository_Expecter) PutProduct(ctx interface{}, key interface{}, product interface{}) *ProductCacheRepository_PutProduct_Call {
	return &ProductCacheRepository_PutProduct_Call{Call: _e.mock.On("PutProduct", ctx, key, product)}
}

func (_c *ProductCacheRepository_PutProduct_Call) Run(run func(ctx context.Context, key string, product *models.Product)) *ProductCacheRepository_PutProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Product))
	})
	return _c
}

func (_c *ProductCacheRepository_PutProduct_Call) Return(_a0 error) *ProductCacheRepository_PutProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductCacheRepository_PutProduct_Call) RunAndReturn(run func(context.Context, string, *models.Product) error) *ProductCacheRepository_PutProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductCacheRepository creates a new instance of ProductCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductCacheRepository {
	mock := &ProductCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
