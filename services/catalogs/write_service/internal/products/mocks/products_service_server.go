// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	products_service "github.com/mehdihadeli/store-golang-microservice-sample/services/catalogs/write_service/internal/products/contracts/proto/service_clients"
	mock "github.com/stretchr/testify/mock"
)

// ProductsServiceServer is an autogenerated mock type for the ProductsServiceServer type
type ProductsServiceServer struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) CreateProduct(_a0 context.Context, _a1 *products_service.CreateProductReq) (*products_service.CreateProductRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *products_service.CreateProductRes
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.CreateProductReq) *products_service.CreateProductRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products_service.CreateProductRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *products_service.CreateProductReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) GetProductById(_a0 context.Context, _a1 *products_service.GetProductByIdReq) (*products_service.GetProductByIdRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *products_service.GetProductByIdRes
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.GetProductByIdReq) *products_service.GetProductByIdRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products_service.GetProductByIdRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *products_service.GetProductByIdReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) UpdateProduct(_a0 context.Context, _a1 *products_service.UpdateProductReq) (*products_service.UpdateProductRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *products_service.UpdateProductRes
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.UpdateProductReq) *products_service.UpdateProductRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products_service.UpdateProductRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *products_service.UpdateProductReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductsServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductsServiceServer creates a new instance of ProductsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductsServiceServer(t mockConstructorTestingTNewProductsServiceServer) *ProductsServiceServer {
	mock := &ProductsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
