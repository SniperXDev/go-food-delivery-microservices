// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	metadata "github.com/mehdihadeli/store-golang-microservice-sample/pkg/core/metadata"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MessageConsumeContextBase is an autogenerated mock type for the MessageConsumeContextBase type
type MessageConsumeContextBase struct {
	mock.Mock
}

// Body provides a mock function with given fields:
func (_m *MessageConsumeContextBase) Body() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ContentType provides a mock function with given fields:
func (_m *MessageConsumeContextBase) ContentType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CorrelationId provides a mock function with given fields:
func (_m *MessageConsumeContextBase) CorrelationId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Created provides a mock function with given fields:
func (_m *MessageConsumeContextBase) Created() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// DeliveryTag provides a mock function with given fields:
func (_m *MessageConsumeContextBase) DeliveryTag() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MessageId provides a mock function with given fields:
func (_m *MessageConsumeContextBase) MessageId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageType provides a mock function with given fields:
func (_m *MessageConsumeContextBase) MessageType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *MessageConsumeContextBase) Metadata() metadata.Metadata {
	ret := _m.Called()

	var r0 metadata.Metadata
	if rf, ok := ret.Get(0).(func() metadata.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.Metadata)
		}
	}

	return r0
}

type mockConstructorTestingTNewMessageConsumeContextBase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageConsumeContextBase creates a new instance of MessageConsumeContextBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageConsumeContextBase(t mockConstructorTestingTNewMessageConsumeContextBase) *MessageConsumeContextBase {
	mock := &MessageConsumeContextBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
