// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pipeline "github.com/mehdihadeli/store-golang-microservice-sample/pkg/messaging/pipeline"
	types "github.com/mehdihadeli/store-golang-microservice-sample/pkg/messaging/types"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerPipeline is an autogenerated mock type for the ConsumerPipeline type
type ConsumerPipeline struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, consumerContext, next
func (_m *ConsumerPipeline) Handle(ctx context.Context, consumerContext types.MessageConsumeContext, next pipeline.ConsumerHandlerFunc) error {
	ret := _m.Called(ctx, consumerContext, next)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MessageConsumeContext, pipeline.ConsumerHandlerFunc) error); ok {
		r0 = rf(ctx, consumerContext, next)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConsumerPipeline interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumerPipeline creates a new instance of ConsumerPipeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerPipeline(t mockConstructorTestingTNewConsumerPipeline) *ConsumerPipeline {
	mock := &ConsumerPipeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
