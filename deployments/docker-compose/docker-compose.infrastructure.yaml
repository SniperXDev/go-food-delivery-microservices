version: "3.8"
name: go-ecommerce-microservices

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    pull_policy: if_not_present
    restart: on-failure
    ports:
      - ${RABBITMQ_HOST_PORT:-5672}:${RABBITMQ_PORT:-5672}
      - ${RABBITMQ_HOST_API_PORT:-15672}:${RABBITMQ_API_PORT:-15672}
      # volumes:
      #   - rabbitmq:/var/lib/rabbitmq
    networks:
      - ecommerce

  prometheus:
    image: prom/prometheus:latest
    pull_policy: if_not_present
    container_name: prometheus
    restart: on-failure
    user: root
    ports:
      - ${PROMETHEUS_HOST_PORT:-9090}:${PROMETHEUS_PORT:-9090}
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - ecommerce

  node_exporter:
    container_name: node_exporter
    pull_policy: if_not_present
    restart: on-failure
    image: prom/node-exporter
    ports:
      - "9101:9100"
    networks:
      - ecommerce

  grafana:
    container_name: grafana
    pull_policy: if_not_present
    restart: on-failure
    image: grafana/grafana
    ports:
      - ${GRAFANA_HOST_PORT:-3000}:${GRAFANA_PORT:-3000}
    networks:
      - ecommerce

  postgres:
    image: postgres:latest
    pull_policy: if_not_present
    container_name: postgres
    restart: on-failure
    ports:
      - ${POSTGRES_HOST_PORT:-5432}:${POSTGRES_PORT:-5432}
    #https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    networks:
      - ecommerce

  # https://developer.redis.com/howtos/quick-start
  # redis-stack is a image with redis modules enabled like JSON module
  redis:
    image: redis/redis-stack:latest
    pull_policy: if_not_present
    restart: on-failure
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ecommerce

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.0.1
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   restart: on-failure
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - ecommerce

  # kafka:
  #   image: confluentinc/cp-kafka:7.0.1
  #   hostname: kafka
  #   container_name: kafka
  #   restart: on-failure
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     ADVERTISED_HOST_NAME: kafka
  #     KAFKA_ADVERTISED_HOSTNAME: 127.0.0.1
  #   networks:
  #     - ecommerce

  # kafka-ui:
  #   image: provectuslabs/kafka-ui
  #   container_name: kafka-ui
  #   ports:
  #     - "8080:8080"
  #   restart: always
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   container_name: kafdrop
  #   ports:
  #       - '9000:9000'
  #   environment:
  #       - 'KAFKA_BROKERCONNECT=<host:port,host:port>'
  #       - 'JVM_OPTS=-Xms32M -Xmx64M'
  #       - SERVER_SERVLET_CONTEXTPATH=/

  mongo:
    image: mongo
    pull_policy: if_not_present
    container_name: mongo
    restart: on-failure
    # https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS:-admin}
    ports:
      - ${MONGO_HOST_PORT:-27017}:${MONGO_PORT:-27017}
    networks:
      - ecommerce

  jaeger:
    container_name: jaeger
    pull_policy: if_not_present
    restart: on-failure
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - ecommerce

  zipkin:
    image: openzipkin/zipkin:latest
    pull_policy: if_not_present
    restart: on-failure
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - ecommerce

  otel-collector:
    image: otel/opentelemetry-collector-contrib-dev:latest
    pull_policy: if_not_present
    command: ["--config=/etc/otel-collector-config.yaml", ""]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
      - zipkin
    networks:
      - ecommerce

  # https://developers.eventstore.com/server/v21.10/installation.html#insecure-single-node
  # https://hub.docker.com/r/eventstore/eventstore/tags
  # https://stackoverflow.com/questions/65272764/ports-are-not-available-listen-tcp-0-0-0-0-50070-bind-an-attempt-was-made-to
  # EVENTSTORE_MEM_DB=true, it tells the EventStoreDB container to use an in-memory database, which means that any data stored in EventStoreDB will not be persisted between container restarts. Once the container is stopped or restarted, all data will be lost.
  eventstore:
    image: eventstore/eventstore:latest
    pull_policy: if_not_present
    container_name: eventstore
    restart: on-failure
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=false
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      - EVENTSTORE_MEM_DB=true
    ports:
      - ${EVENTSTORE_TCP_HOST_PORT:-1113}:${EVENTSTORE_TCP_PORT:-1113}
      - ${EVENTSTORE_HOST_PORT:-2113}:${EVENTSTORE_PORT:-2113}
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    networks:
      - ecommerce

  # elasticsearch:
  #   container_name: elastic_search
  #   restart: on-failure
  #   image: elasticsearch:8.5.2
  #   environment:
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - xpack.monitoring.enabled=true
  #     - xpack.watcher.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elastic-data:/usr/share/elasticsearch/data
  #   ports:
  #     - ${ELASTIC_HOST_PORT:-9200}:${ELASTIC_PORT:-9200}
  #     - 9300:9300
  #   networks:
  #     - ecommerce

  # kibana:
  #   image: kibana:8.5.2
  #   container_name: kibana
  #   restart: on-failure
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elastic_search:9200
  #   ports:
  #     - ${KIBANA_HOST_PORT:-5601}:${KIBANA_PORT:-5601}
  #   networks:
  #     - ecommerce
  #   depends_on:
  #     - elasticsearch

volumes:
  eventstore-volume-data:
  eventstore-volume-logs:
  elastic-data:

networks:
  ecommerce:
    name: ecommerce
